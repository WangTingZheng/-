<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  <subtitle>学习使我快乐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-05T14:52:33.278Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Engou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用OpenMV实现循迹</title>
    <link href="http://yoursite.com/2018/10/05/%E7%94%A8OpenMV%E5%AE%9E%E7%8E%B0%E5%BE%AA%E8%BF%B9/"/>
    <id>http://yoursite.com/2018/10/05/用OpenMV实现循迹/</id>
    <published>2018-10-05T12:13:18.000Z</published>
    <updated>2018-10-05T14:52:33.278Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ksr-ugc.imgix.net/assets/022/418/689/2babfabc079b82a2ab8eb527a589baf0_original.jpg?ixlib=rb-1.1.0&amp;w=680&amp;fit=max&amp;v=1535845522&amp;auto=format&amp;gif-q=50&amp;q=92&amp;s=d00b5c3ecc28b8c4790e0705a959730a" alt="此为OpenMV Cam H7"></p><p>为了迎接实验室举办的robomaster校内赛，我负责建造一个利用图像识别循迹的小车，来应对90度甚至135度的大转弯，与此同时，还可能面临一些其它识别。我主要要研究的是如何利用OpenMV来识别路况，通过uart串口协议指挥stm32来控制小车进行一系列的动作。<br>&lt;!-more-&gt;</p><h4 id="一-创建detapy文档实现识别一个角的角度"><a class="markdownIt-Anchor" href="#一-创建detapy文档实现识别一个角的角度"></a> 一、创建deta.py文档，实现识别一个角的角度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># deta.py - By: Engou - 周日 9月 31 2018</span></div><div class="line"><span class="comment">#本脚本能实现画出图中的直线并求出最先发现的两条直线的角度差</span></div><div class="line"><span class="keyword">import</span> sensor, image, time  <span class="comment">#包含进一些模块</span></div><div class="line"></div><div class="line">deta_theta = <span class="number">0</span>   <span class="comment">#角度差</span></div><div class="line">one_theta = <span class="number">0</span>    <span class="comment">#第一条线的角度</span></div><div class="line">two_theta = <span class="number">0</span>    <span class="comment">#第二条线的角度</span></div><div class="line">min_degree = <span class="number">0</span>   <span class="comment">#角度的最小值</span></div><div class="line">max_degree = <span class="number">359</span> <span class="comment">#角度的最大值，此处可以改成360，以便更好区分锐角与钝角</span></div><div class="line">flag = <span class="number">0</span></div><div class="line"></div><div class="line">sensor.reset()   <span class="comment">#一些初始化操作</span></div><div class="line">sensor.set_pixformat(sensor.RGB565)</div><div class="line">sensor.set_framesize(sensor.QVGA)</div><div class="line">sensor.skip_frames(time = <span class="number">2000</span>)</div><div class="line"></div><div class="line">clock = time.clock()</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">    clock.tick()</div><div class="line">    img = sensor.snapshot()</div><div class="line">    lines = img.find_lines()</div><div class="line">    <span class="keyword">if</span> len(lines) == <span class="number">2</span>:                 <span class="comment">#如果有第二条线</span></div><div class="line">        one_theta = lines[<span class="number">0</span>].theta()    <span class="comment">#给第一条线赋值</span></div><div class="line">        two_theta = lines[<span class="number">1</span>].theta()    <span class="comment">#给第二条线赋值</span></div><div class="line">    deta_theta=one_theta-two_theta      <span class="comment">#做差求出两条直线的角度差</span></div><div class="line">    <span class="keyword">if</span>(deta_theta&lt;<span class="number">0</span>):                   <span class="comment">#取正</span></div><div class="line">        deta_theta=-deta_theta</div><div class="line">    <span class="comment">#print(clock.fps())</span></div><div class="line">    <span class="comment">#下面是显示直线到画面的模块，具体就不解释了</span></div><div class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> img.find_lines(threshold = <span class="number">1000</span>, theta_margin = <span class="number">25</span>, rho_margin = <span class="number">25</span>):</div><div class="line">        <span class="keyword">if</span> (min_degree &lt;= l.theta()) <span class="keyword">and</span> (l.theta() &lt;= max_degree):</div><div class="line">            img.draw_line(l.line(), color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">    print(deta_theta)                   <span class="comment">#在串口上连续输出角度差</span></div></pre></td></tr></table></figure><p>该工程的目的是识别robomaster校内赛上不同的线路情况，以便进行相应的操作。不同的道路标示主要有以下四种：</p><p><img src="https://i.loli.net/2018/09/30/5bb0e4c980ccd.png" alt="1"></p><p>目前deta.py还不能识别十字路口，也没办法判断路况的方向，因为它是根据判断角度来进行识别的</p><h4 id="二-利用roiregion-of-interest"><a class="markdownIt-Anchor" href="#二-利用roiregion-of-interest"></a> 二、利用ROI(Region of interest)</h4><p>我了解到，可以设置一个感兴趣的区域，对这个区域单独进行操作，于是我有了一个新的思路：</p><h5 id="1首先我们要用到直线识别"><a class="markdownIt-Anchor" href="#1首先我们要用到直线识别"></a> 1.**首先我们要用到直线识别 **</h5><p>使用find_lines函数找出屏幕中所有的直线，对于上图的四种情况，在理想状态下有两个取值：1和2。直线是1，锐角、十字、直角都是2，这样我们可以排除直线；</p><p>我们再根据find_lines函数返回的直线角度值进行进一步判断。在理想条件下，如果两条直线的夹角小于90度的话，那这个图形一定是锐角，这样我们排除了锐角的情况；</p><h5 id="2从现在开始需要用到roi"><a class="markdownIt-Anchor" href="#2从现在开始需要用到roi"></a> 2.**从现在开始需要用到ROI **</h5><p>我们把屏幕分割成以下四个区域</p><p><img src="https://i.loli.net/2018/10/05/5bb76fabc939e.png" alt="无标题.png"></p><p>我们知道，图像一定会经过它们四个中的某几个的，对于十字来讲，它穿过的区域有上、下、左、右，对于直角来讲，它穿过的区域有左、下或者右、下，这样我们也可以区分十字和直角了。</p><h5 id="3接下来我们要判断它们的方向不包括直线和十字"><a class="markdownIt-Anchor" href="#3接下来我们要判断它们的方向不包括直线和十字"></a> 3.<strong>接下来我们要判断它们的方向(不包括直线和十字)</strong></h5><p>对于锐角和直角，我们都采取相似的算法</p><p>我们采用函数find_blobs函数获取roi内的直线区块的值，我们需要的是它的个数，如果一个roi内有直线，也就是直线的区块的数量为1，相应的flag值就被赋值为1</p><p>如果下边和右边的直线存在的话，说明它是朝右的，如果是下边和左边的直线存在的话，说明它是朝左的。</p><p>至此，我们已经能完全分辨以上四个物体，而且还能区分它们的反向（如果有的话）</p><h4 id="4我把以上算法写成程序"><a class="markdownIt-Anchor" href="#4我把以上算法写成程序"></a> <strong>4.我把以上算法写成程序</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sensor, image, time,math</div><div class="line"></div><div class="line">sensor.reset()</div><div class="line">sensor.set_pixformat(sensor.GRAYSCALE)</div><div class="line">sensor.set_framesize(sensor.QVGA)</div><div class="line">sensor.skip_frames(time = <span class="number">2000</span>)</div><div class="line"></div><div class="line">wid=<span class="number">50</span></div><div class="line"></div><div class="line">ROIup=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,wid]</div><div class="line">ROIdo=[<span class="number">0</span>,<span class="number">240</span>-wid,<span class="number">320</span>,wid]</div><div class="line">ROIle=[<span class="number">0</span>,<span class="number">0</span>,wid,<span class="number">240</span>]</div><div class="line">ROIri=[<span class="number">320</span>-wid,<span class="number">0</span>,wid,<span class="number">240</span>]</div><div class="line"></div><div class="line">up=<span class="number">0</span></div><div class="line">do=<span class="number">0</span></div><div class="line">le=<span class="number">0</span></div><div class="line">ri=<span class="number">0</span></div><div class="line"></div><div class="line">deta_theta = <span class="number">0</span>   <span class="comment">#角度差</span></div><div class="line">one_theta = <span class="number">0</span>    <span class="comment">#第一条线的角度</span></div><div class="line">two_theta = <span class="number">0</span>    <span class="comment">#第二条线的角度</span></div><div class="line">min_degree = <span class="number">0</span>   <span class="comment">#角度的最小值</span></div><div class="line">max_degree = <span class="number">359</span> <span class="comment">#角度的最大值，此处可以改成360，以便更好区分锐角与钝角</span></div><div class="line">flag = <span class="number">0</span></div><div class="line"></div><div class="line">threshold = [(<span class="number">0</span>,<span class="number">60</span>)]</div><div class="line"></div><div class="line">clock = time.clock()</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">    clock.tick()</div><div class="line">    image = sensor.snapshot()</div><div class="line"></div><div class="line">    lines = image.find_lines()</div><div class="line">    <span class="keyword">if</span> len(lines)== <span class="number">1</span>:</div><div class="line">        print(<span class="string">"starght"</span>)</div><div class="line">    <span class="keyword">if</span> len(lines) == <span class="number">2</span>:                 <span class="comment">#如果有第二条线</span></div><div class="line">        one_theta = lines[<span class="number">0</span>].theta()    <span class="comment">#给第一条线赋值</span></div><div class="line">        two_theta = lines[<span class="number">1</span>].theta()    <span class="comment">#给第二条线赋值</span></div><div class="line">    deta_theta=one_theta-two_theta      <span class="comment">#做差求出两条直线的角度差</span></div><div class="line">    <span class="keyword">if</span>(deta_theta&lt;<span class="number">0</span>):                   <span class="comment">#取正</span></div><div class="line">        deta_theta=-deta_theta</div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(image.find_blobs(threshold,roi=ROIup,merge=<span class="keyword">True</span>))==<span class="number">1</span>:</div><div class="line">        up=<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> len(image.find_blobs(threshold,roi=ROIdo,merge=<span class="keyword">True</span>))==<span class="number">1</span>:</div><div class="line">        do=<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> len(image.find_blobs(threshold,roi=ROIle,merge=<span class="keyword">True</span>))==<span class="number">1</span>:</div><div class="line">        le=<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> len(image.find_blobs(threshold,roi=ROIri,merge=<span class="keyword">True</span>))==<span class="number">1</span>:</div><div class="line">        ri=<span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> up==<span class="number">1</span> <span class="keyword">and</span> do==<span class="number">1</span> :</div><div class="line">        print(<span class="string">"starght"</span>) <span class="comment">#直角</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> deta_theta==<span class="number">90</span>:</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> do==<span class="number">1</span> <span class="keyword">and</span> ri==<span class="number">1</span> :</div><div class="line">            print(<span class="string">"right"</span>)<span class="comment">#直角朝右</span></div><div class="line">        <span class="keyword">if</span> do==<span class="number">1</span> <span class="keyword">and</span> le==<span class="number">1</span>:</div><div class="line">            print(<span class="string">"left"</span>) <span class="comment">#直角朝左</span></div><div class="line">        <span class="keyword">if</span> do==<span class="number">1</span> <span class="keyword">and</span> up==<span class="number">1</span> <span class="keyword">and</span> ri==<span class="number">1</span> <span class="keyword">and</span> le==<span class="number">1</span> :</div><div class="line">            print(<span class="string">"decide"</span>)  <span class="comment">#十字</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> le==<span class="number">1</span> <span class="keyword">and</span> do==<span class="number">1</span>:</div><div class="line">            print(<span class="string">"45left"</span>)   <span class="comment">#锐角朝左</span></div><div class="line">        <span class="keyword">if</span> ri==<span class="number">1</span> <span class="keyword">and</span> do==<span class="number">1</span>:</div><div class="line">            print(<span class="string">"45right"</span>) <span class="comment">#锐角朝右</span></div><div class="line"></div><div class="line">    up=<span class="number">0</span></div><div class="line">    do=<span class="number">0</span></div><div class="line">    le=<span class="number">0</span></div><div class="line">    ri=<span class="number">0</span></div></pre></td></tr></table></figure><p>该程序还还有许多需要改进的地方，主要有：</p><h5 id="1roi区域的划分"><a class="markdownIt-Anchor" href="#1roi区域的划分"></a> 1.<strong>ROI区域的划分</strong></h5><p>如果ROI的区域划分得太小，识别的可留误差会变小，在这个时候一旦识别不到，就会出现失误，如果ROI的区域划分太大，容易出现错位，我们知道，图像不一定是在正中央的，所以，ROI的选取需要一个实验的过程，要不断的调整程序中<code>wid</code> 的值来获得一个最佳的ROI空间。</p><h5 id="2锐角和直角的区分"><a class="markdownIt-Anchor" href="#2锐角和直角的区分"></a> <strong>2.锐角和直角的区分</strong></h5><p>锐角和直角的划分是根据直线识别函数取得的角度差来判定的，在现实情况下，直角可能不是90度，锐角也不一定是45度，甚至有可能大于90度，这些误差是需要后继调整的</p><h5 id="3光线问题"><a class="markdownIt-Anchor" href="#3光线问题"></a> <strong>3.光线问题</strong></h5><p>图像识别的缺点就是受光线影响太大，在之前的程序测试的时候这种问题已经显现，其实也比较好解决，只要打一些辅助灯光就ok，OpenMV也自带led，但最怕的是到时候比赛的环境有所变化，影响到图像识别的精度。</p><h5 id="4处理误差问题"><a class="markdownIt-Anchor" href="#4处理误差问题"></a> <strong>4.处理误差问题</strong></h5><p>由于有以上的误差存在，图像识别的结果不会百分之百准确，但我们的小车接收到的转向指令需要百分之百准确，对于这些误差，我们无法百分之百消除，只能利用算法和统计来抵消，这一点需要将来不断完善。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ksr-ugc.imgix.net/assets/022/418/689/2babfabc079b82a2ab8eb527a589baf0_original.jpg?ixlib=rb-1.1.0&amp;amp;w=680&amp;amp;fit=max
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="OpenMV" scheme="http://yoursite.com/tags/OpenMV/"/>
    
  </entry>
  
  <entry>
    <title>矩阵按键</title>
    <link href="http://yoursite.com/2018/09/12/%E7%9F%A9%E9%98%B5%E6%8C%89%E9%94%AE/"/>
    <id>http://yoursite.com/2018/09/12/矩阵按键/</id>
    <published>2018-09-12T12:13:18.000Z</published>
    <updated>2018-10-06T03:28:14.794Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/10/06/5bb82b9505eb0.jpg" alt="图为一款芯片"></p><a id="more"></a><h1 id="44矩阵按键"><a class="markdownIt-Anchor" href="#44矩阵按键"></a> 4×4矩阵按键</h1><h3 id="一-概述"><a class="markdownIt-Anchor" href="#一-概述"></a> 一、概述</h3><p>4×4矩阵按键是一种由4排4列共16个可弹出式按键组成的按键组，矩阵按键利用单片机的IO口来识别当前按键的状态，能够使用户与单片机进行交互，比如说设定时钟的值，设定闹钟等。</p><h3 id="二-原理"><a class="markdownIt-Anchor" href="#二-原理"></a> 二、原理</h3><p><img src="https://i.loli.net/2018/09/10/5b964caaafd58.jpg" alt=""></p><p>可以看到，矩阵键盘的原理十分简单，它有8个接口，5到8控制行，1到4控制列，它具体的工作方式是这样的：</p><p>假设第5个串口所连接的IO口具有高电平的状态，当S15被按下时，从5到2的电路将被接通，此时2这个串口可以检测到高电平。所以说，要想检测S15是否被按下，只需把5串口所对应的IO口设置为高电平的输出，再检测2号输入串口是否接收到了高电平即可。</p><h3 id="三-代码解析"><a class="markdownIt-Anchor" href="#三-代码解析"></a> 三、代码解析</h3><p>目前我写的最新的驱动是“按键识别+显示优化”，已经备份到我的坚果云上，这个工程能实现的效果是当用户按下16个键的其中一个时，屏幕会显示用户所按下键的数字代号，此工程的按键驱动全部位于<code>key.c</code>文件内，需要修改当按下某个键的反馈，可以修改<code>key.c</code>文件第127的内容来执行相应的函数，本文不对工程所包含的OLED显示屏驱动进行讲解。</p><h4 id="1引脚说明"><a class="markdownIt-Anchor" href="#1引脚说明"></a> 1.引脚说明</h4><table><thead><tr><th style="text-align:center">输入端</th><th style="text-align:center">STM32引脚</th><th style="text-align:center">输出端</th><th style="text-align:center">STM32引脚</th></tr></thead><tbody><tr><td style="text-align:center">L1</td><td style="text-align:center">PD4</td><td style="text-align:center">H1</td><td style="text-align:center">PD0</td></tr><tr><td style="text-align:center">L2</td><td style="text-align:center">PD5</td><td style="text-align:center">H2</td><td style="text-align:center">PD1</td></tr><tr><td style="text-align:center">L3</td><td style="text-align:center">PD6</td><td style="text-align:center">H3</td><td style="text-align:center">PD2</td></tr><tr><td style="text-align:center">L4</td><td style="text-align:center">PD7</td><td style="text-align:center">H4</td><td style="text-align:center">PD3</td></tr></tbody></table><h4 id="2头文件"><a class="markdownIt-Anchor" href="#2头文件"></a> 2.头文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"oled.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"key.h"</span></span></div></pre></td></tr></table></figure><p><strong>oled.h</strong></p><p>是OLED屏幕显示的驱动程序，按键驱动程序需要使用其中的<code>ShowNum()</code>函数，用来显示按下的按键。</p><p><strong>delay.h</strong></p><p>是工程自带的延时函数，本驱动用需要其中的<code>delay_ms()</code>来去除屏幕显示的抖动。</p><p>注意：<code>key.c</code>里没有<code>stm32f10x_gpio.h</code>是因为前两者已经在头文件中包含了<code>stm32f10x.h</code>了</p><p><strong>key.h</strong></p><p>指引本程序到<code>key.h</code>，只有在<code>key.h</code>中定义的函数、结构体等能被其它文件所引用</p><h4 id="3数组"><a class="markdownIt-Anchor" href="#3数组"></a> 3.数组</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">u32 keyword[<span class="number">4</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;,&#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>&#125;&#125;;</div></pre></td></tr></table></figure><p>用来储存键位值，是一个4×4矩阵数组，对应矩阵按键的1到4，5到7，已知输入输出的GPIO口可以知道对应的键位值。</p><h4 id="4函数"><a class="markdownIt-Anchor" href="#4函数"></a> 4.函数</h4><h5 id="1按键程序初始化函数"><a class="markdownIt-Anchor" href="#1按键程序初始化函数"></a> 1.按键程序初始化函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">GPIO_InitTypeDef GPIO_InitStructure;</div><div class="line"></div><div class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</div><div class="line"></div><div class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</div><div class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;</div><div class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</div><div class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</div><div class="line"></div><div class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</div><div class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;</div><div class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</div><div class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该函数为空形参，空返回值，主要是初始化按键驱动程序要用到的GPIO端口、时钟的配置</p><h6 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> <strong>第一步：</strong></h6><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GPIO_InitTypeDef GPIO_InitStructure;</div></pre></td></tr></table></figure><h6 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> **第二步： **</h6><p>定义一个GPIO结构体，用来设置GPIO接口的模式、具体的地址和频率</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</div></pre></td></tr></table></figure><p>RCC(Reset Clock Controller)是STM32的时钟控制器。RCC_APB2PeriphClockCmd();是APB2外设时钟的控制函数，我们使用该函数激活GPIO对应的时钟，注意，我们的矩阵按键是接在GPIOA接口上的，所以这个函数的中的第一个代表所要操作的接口的值为GPIOA，第二个参数为ENABLE，表示激活。</p><p>注意：</p><blockquote><p>APB1和APB2的不同</p><p>他们下面挂的外设不同，因为不同的外设需要的时钟不同。</p><p>一个是高速时钟，一个是低速时钟<br>具体看STM32的时钟介绍。</p><p>APB2负责AD，I/O，串口1，高级定时器TIM<br>APB1负责DA，串口2，3，4，5，普通定时器TIM，USB，IIC，CAN</p></blockquote><h6 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> **第三步： **</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;</div><div class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</div><div class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</div><div class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</div></pre></td></tr></table></figure><p>这个对输出端口的配置</p><p><code>GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;</code></p><p>通过对GPIO结构体的GPIO_Pin值进行赋值，设置GPIO的模式，我们先设置四个IO口：0、1、2、3，对它们进行操作。</p><p><code>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</code></p><p>通过对GPIO结构体的GPIO_Mode值进行赋值，设置GPIO的模式，本次我们将四个IO口设置成推挽式输出，推挽输出的特点是电流大，具有驱动力。</p><p><code>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</code></p><p>通过对GPIO结构体的GPIO_Speed值经行赋值，设置GPIO的速度，关于这个速度的理解是，我们为IO设置速度的时候，就相当于为它们设置一个带宽，也就是能承载的最大的频率，可理解为: 输出驱动电路的带宽：即一个驱动电路可以不失真地通过信号的最大频率。</p><p>但是频率不能设置得太大，最大频率设定得越大越容易有噪声，同时能耗也大。</p><h6 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> <strong>第四步：</strong></h6><p><code>GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</code></p><p>按照上面设定好的参数初始化IO口，相当于对以上的配置进行保存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;</div><div class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</div><div class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</div><div class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</div></pre></td></tr></table></figure><p>同样的，我们初始化4、5、6、7IO口，与此前不同的是，我们将它们设置成输入下拉模式，这样会在没有信号输入的时候呈现低电平。</p><p>到此，所以8个GPIO接口就已经被初始化完毕了。</p><h5 id="2gpio电平初始化函数"><a class="markdownIt-Anchor" href="#2gpio电平初始化函数"></a> 2.GPIO电平初始化函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Out_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_SET);</div><div class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_1,Bit_SET);</div><div class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_2,Bit_SET);</div><div class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_3,Bit_SET);</div><div class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_4,Bit_SET);</div><div class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_5,Bit_SET);</div><div class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_6,Bit_SET);</div><div class="line">GPIO_WriteBit(GPIOA,GPIO_Pin_7,Bit_SET);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>GPIO_WriteBit();</code>函数的作用是对一组GPIO口中的一个进行设置或者清除位，在本函数中，<code>GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_SET);</code>可以用来设置GPIOA的0号接口的值为Bit_SET,以上的函数对8个口进行初始化，同时，在判定一个按键之后也会执行该程序，以免造成混乱。</p><h5 id="3总初始化函数"><a class="markdownIt-Anchor" href="#3总初始化函数"></a> 3.总初始化函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">all_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">delay_init();</div><div class="line">OLED_Init();</div><div class="line">OLED_Clear();</div><div class="line">key_init();</div><div class="line">GPIO_Out_Init();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>delay_init();</code>是延时函数初始化函数，在OLED上显示数字时，需要执行delay_ms(10);来消除抖动。</p><p><code>OLED_Init();</code>OLED显示驱动的初始化程序</p><p><code>OLED_Clear();</code>OLED屏幕清除模式，本质是对屏幕的每个像素点的状态进行赋初值。如果不执行，屏幕会出现混乱的图像；</p><p><code>key_init();</code>初始化按键所用的GPIO接口</p><p><code>GPIO_Out_Init();</code>初始化各个GPIO口的状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_print</span><span class="params">(u16 a)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(a&lt;=<span class="number">9</span>)</div><div class="line">&#123;</div><div class="line">OLED_ShowNum(<span class="number">0</span>,<span class="number">0</span>,a,<span class="number">1</span>,<span class="number">16</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">OLED_ShowNum(<span class="number">0</span>,<span class="number">0</span>,a,<span class="number">2</span>,<span class="number">16</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>是一个能显示一位到两位数字到屏幕左上角的函数，OLED_ShowNum(0,0,a,1,16);函数的第一和第二的参数是要显示的位置的坐标，第3个参数是要显示的数字，第4个数字是显示数字的位数，第5个是字号。</p><h5 id="4gpio激活函数"><a class="markdownIt-Anchor" href="#4gpio激活函数"></a> 4.GPIO激活函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gpio_jihuo</span><span class="params">(u32 a)</span></span></div><div class="line"> &#123;</div><div class="line"><span class="keyword">switch</span>(a)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>:GPIO_WriteBit(GPIOA,GPIO_Pin_0,Bit_RESET);<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>:GPIO_WriteBit(GPIOA,GPIO_Pin_1,Bit_RESET);<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">2</span>:GPIO_WriteBit(GPIOA,GPIO_Pin_2,Bit_RESET);<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">3</span>:GPIO_WriteBit(GPIOA,GPIO_Pin_3,Bit_RESET);<span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>该函数有一个形参，用来输入想要操作的端口，该函数能够将一个IO口的状态从Bit_SET改为Bit_RESET。</p><h5 id="5输入端读取函数"><a class="markdownIt-Anchor" href="#5输入端读取函数"></a> 5.输入端读取函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function">u16 <span class="title">read</span><span class="params">(u32 a)</span></span></div><div class="line"> &#123;</div><div class="line"> u16 flag;</div><div class="line"> a+=<span class="number">4</span>;</div><div class="line"><span class="keyword">switch</span>(a)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">4</span>:flag=GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4);<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">5</span>:flag=GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_5);<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">6</span>:flag=GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_6);<span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">7</span>:flag=GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_7);<span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> flag;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>该函数有一个形参，用来输入要读取的端口名，还有一个返回值，放回端口的状态，有两个值，一个是Bit_SET,一个Bit_RESET。 通过flag返回出来。</p><p>注意：为了和输出的端口同步，需要在端口号上加4，这样就可以和输出一样只输入1-4的端口号了。</p><h5 id="5单个按键检测函数"><a class="markdownIt-Anchor" href="#5单个按键检测函数"></a> 5.单个按键检测函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(u32 k)</span></span></div><div class="line">&#123;</div><div class="line">u32 a,b;</div><div class="line">u32 c,d;</div><div class="line"><span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">4</span>;a++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(b=<span class="number">0</span>;b&lt;<span class="number">4</span>;b++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(keyword[a][b]==k)</div><div class="line">&#123;</div><div class="line">c=a;</div><div class="line">d=b;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">gpio_jihuo(c);</div><div class="line"><span class="keyword">if</span>(read(d)==Bit_RESET)</div><div class="line">&#123;</div><div class="line">key_print(keyword[c][d]);</div><div class="line">delay_ms(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">GPIO_Out_Init();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="第一步-2"><a class="markdownIt-Anchor" href="#第一步-2"></a> <strong>第一步：</strong></h6><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">4</span>;a++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(b=<span class="number">0</span>;b&lt;<span class="number">4</span>;b++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(keyword[a][b]==k)</div><div class="line">&#123;</div><div class="line">c=a;</div><div class="line">d=b;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过检索keyword数组里检索所要检测的按键，用c和d记录下这个键位的坐标。</p><h6 id="第二步-2"><a class="markdownIt-Anchor" href="#第二步-2"></a> <strong>第二步：</strong></h6><p><code>gpio_jihuo(c);</code>：上文提到的GPIO激活函数，这一行指令是激活目前按键所对应的输出IO口，输出一个高电平。</p><h6 id="第三步-2"><a class="markdownIt-Anchor" href="#第三步-2"></a> <strong>第三步：</strong></h6><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(read(d)==Bit_RESET)</div><div class="line">&#123;</div><div class="line">key_print(keyword[c][d]);</div><div class="line">delay_ms(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输入端状态判断，当某一个按键被按下同时它所对应的输出端的值为Bit_SET时，该按键的输入端会从Bit_SET变为Bit_RESET，由最开始的通过之前的检索过程，我们知道，c是当前按键的输出端口，d是当前按键的输入端口，通过判断输入端口是否是Bit_RESET,来判断是否按下当前的按键，如果条件成立，则执行所需程序，这里我们执行的是在OLED屏幕上打印出按键号，然后让图像留存10毫秒，避免图像抖动。</p><h6 id="第四步-2"><a class="markdownIt-Anchor" href="#第四步-2"></a> <strong>第四步：</strong></h6><p><code>GPIO_Out_Init();</code>函数初始化IO口状态。</p><h5 id="6检测循环函数"><a class="markdownIt-Anchor" href="#6检测循环函数"></a> 6.检测循环函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_scan</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">u32 a=<span class="number">1</span>;</div><div class="line">    all_init();</div><div class="line"><span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;<span class="number">17</span>;a++)</div><div class="line"> &#123;</div><div class="line">check(a);</div><div class="line"><span class="keyword">if</span>(a==<span class="number">16</span>)</div><div class="line">&#123;</div><div class="line">a=<span class="number">0</span>;</div><div class="line">OLED_Clear();</div><div class="line">&#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在进入循环之前先初始化各项内容，再创造一个从1到16的循环，每一次检测一个按键，当要检测一个按键时，直接运行单个按键检测函数，若按键被按下，check();会执行相应的函数，执行完毕之后，判定是否为最后一个按键，我们知道，在如此情况下，只靠for循环是无法做到无限循环的，我们需要一个判定程序来判别是否已经到最后一个按键或者说是否已经需要从头开始循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(a==<span class="number">16</span>)</div><div class="line">&#123;</div><div class="line">a=<span class="number">0</span>;</div><div class="line">OLED_Clear();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当到达最后一个按键时，把要检测的按键值重新扳回到0，这样在本次程序结束后，通过a自加，有重新变回1，也就是重新从第一个按键开始检测，同时清除OLED上的信息，避免和下一次的1重复，这里使用的是<code>OLED_Clear();</code>函数以此构成一个无限的循环，让单片机一直检测按键的状态。</p><h4 id="5头文件"><a class="markdownIt-Anchor" href="#5头文件"></a> 5.头文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __KEY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __KEY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_scan</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><h5 id="1宏定义"><a class="markdownIt-Anchor" href="#1宏定义"></a> 1.宏定义</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __KEY_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __KEY_H</span></div></pre></td></tr></table></figure><p>这两个语句的意思是，如果没有定义宏名<code>__KEY_H</code>，就定义一个<code>__KEY_H</code>，这个一般用在免重复包含中，防止头文件被重复包含或者数据类型重定义了。</p><h5 id="2头文件-2"><a class="markdownIt-Anchor" href="#2头文件-2"></a> 2.头文件</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></div></pre></td></tr></table></figure><p>这个头文件有关于u8、u16、u32的定义，本文件用到了u16，所以需要声明它。顺便提一句，uint8_t、uint16_t、uint32_t的定义在<code>stdint.h</code>头文件里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">key_scan</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div></pre></td></tr></table></figure><p>因为我们需要在其它文件里使用检测循环函数，所以我们应该在头文件里声明它。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><p>结束定义。</p><h3 id="四-驱动的使用方法"><a class="markdownIt-Anchor" href="#四-驱动的使用方法"></a> 四、驱动的使用方法</h3><h5 id="第一步-3"><a class="markdownIt-Anchor" href="#第一步-3"></a> <strong>第一步：</strong></h5><p>在你需要执行按键驱动模块的文件里声明<code>key.h</code>头文件</p><h5 id="第二步-3"><a class="markdownIt-Anchor" href="#第二步-3"></a> <strong>第二步：</strong></h5><p>直接在你需要的地方写上<code>key_scan();</code></p><h5 id="第三步-3"><a class="markdownIt-Anchor" href="#第三步-3"></a> <strong>第三步：</strong></h5><p>修改key.c文件下的<code>check(u32 k)；</code>的第三步的if里的语句，注意，可以用<code>keyword[c][d]</code>获取当前的键值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/06/5bb82b9505eb0.jpg&quot; alt=&quot;图为一款芯片&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="STM32" scheme="http://yoursite.com/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>模拟电路</title>
    <link href="http://yoursite.com/2018/09/05/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/09/05/模拟电路/</id>
    <published>2018-09-05T15:42:24.000Z</published>
    <updated>2018-09-20T12:49:57.277Z</updated>
    
    <content type="html"><![CDATA[<p>第一章 常用的导体器件</p><h2 id="11半导体基础知识"><a class="markdownIt-Anchor" href="#11半导体基础知识"></a> 1.1半导体基础知识</h2><h3 id="111本征半导体"><a class="markdownIt-Anchor" href="#111本征半导体"></a> 1.1.1本征半导体</h3><p><strong>定义：</strong> <code>纯净</code> 的具有<code>晶体结构</code>的半导体</p><p><code>纯净：无杂质</code>            <code>晶体结构：稳定的结构</code></p><a id="more"></a><h4 id="一-半导体"><a class="markdownIt-Anchor" href="#一-半导体"></a> 一、半导体</h4><p>物质按导电性分类</p><table><thead><tr><th>物质</th><th>元素价位</th><th>导电原理</th></tr></thead><tbody><tr><td>导体</td><td>低价位</td><td>最外层电子极易挣脱原子核的束缚成为自由电子，在外电场的作用下定向移动</td></tr><tr><td>绝缘体</td><td>高价位</td><td>最外层电子不易挣脱原子核的束缚成为自由电子。</td></tr><tr><td>半导体</td><td>四价位</td><td>一般1比较难导电，可以掺入<code>杂质</code>来人工改变导电性</td></tr></tbody></table><p><strong>PS:半导体使用的四价位材料一般为硅(Si)和锗(Ge)元素</strong></p><h4 id="二-热激发"><a class="markdownIt-Anchor" href="#二-热激发"></a> 二、热激发</h4><p><img src="https://i.loli.net/2018/09/05/5b8feb4ebd0f6.jpg" alt="1.1.1"></p><h5 id="1载流子运载电荷的粒子称为载流子"><a class="markdownIt-Anchor" href="#1载流子运载电荷的粒子称为载流子"></a> 1.载流子：运载电荷的粒子称为载流子</h5><table><thead><tr><th>物质</th><th style="text-align:left">载流子</th></tr></thead><tbody><tr><td>导体</td><td style="text-align:left">自由电子</td></tr><tr><td>半导体</td><td style="text-align:left">自由电子、空穴</td></tr></tbody></table><h5 id="2本征激发半导体在热激发下产生自由电子和空穴的现象叫做本征激发"><a class="markdownIt-Anchor" href="#2本征激发半导体在热激发下产生自由电子和空穴的现象叫做本征激发"></a> 2.本征激发：半导体在热激发下产生自由电子和空穴的现象叫做本征激发</h5><p><strong>复合：电子在自由运动的过程中如果与空穴相遇就会填补空穴，使两者同时消失</strong></p><h5 id="3本征激发和复合的动态平衡"><a class="markdownIt-Anchor" href="#3本征激发和复合的动态平衡"></a> 3.本征激发和复合的动态平衡</h5><p>在某一温度下，本征激发产生的自由电子和空穴与复合的自由电子和空穴数量相等</p><h3 id="112-杂质导体"><a class="markdownIt-Anchor" href="#112-杂质导体"></a> 1.1.2 杂质导体</h3><p>通过专业的扩散工艺，使高价/低价的导体原子嵌套在四价的半导体中</p><h4 id="一-n型半导体"><a class="markdownIt-Anchor" href="#一-n型半导体"></a> 一、N型半导体</h4><p>PS: <code>N</code> =<code>Negative</code> =<code>负的</code></p><p><img src="https://i.loli.net/2018/09/05/5b8ff170ad521.jpg" alt="1.1.3"></p><p>主要掺入的杂质为五价的磷，磷元素的五个电子中的四个与四价的硅形成四条牢固的共价键，剩余一个自由电子飘荡在外围，极易在外电场的作用下定向移动，增强了导电性</p><p>此时，五价的磷元素的原子核由于提供一个额外的自由电子，被称为<strong>施主原子</strong></p><h4 id="二-p型半导体"><a class="markdownIt-Anchor" href="#二-p型半导体"></a> 二、P型半导体</h4><p>PS:<code>P</code>=<code>Positive</code>=<code>正的</code></p><p>主要掺入的是三价的硼元素，外围的三个电子与四价的硅元素的电子形成三条完整的共价键，另外一边由于电子不够，一个空穴与硅元素的电子配对，空位的增加意味着自由电子的相对减少，削弱了导电性</p><p>此时，三价的硼元素由于缺少一个电子，由一个硅元素提供一个电子，被称为<strong>受主原子</strong></p><h4 id="三-多子与少子"><a class="markdownIt-Anchor" href="#三-多子与少子"></a> 三、多子与少子</h4><p>**多子： **又称<u><em>多数载流子</em></u>，是指在半导体中浓度大的载流子</p><p>**少子：**又称<u><em>少数载流子</em></u>，是指在半导体中浓度小的载流子</p><table><thead><tr><th>半导体</th><th>多子</th><th>少子</th></tr></thead><tbody><tr><td>N型半导体</td><td>自由电子</td><td>空穴</td></tr><tr><td>P型半导体</td><td>空穴</td><td>自由电子</td></tr></tbody></table><p>PS：当温度变化时，少子的浓度变化大，因为少子的基础浓度小。</p><h3 id="113-pn结"><a class="markdownIt-Anchor" href="#113-pn结"></a> 1.1.3 PN结</h3><h4 id="一-pn结的形成"><a class="markdownIt-Anchor" href="#一-pn结的形成"></a> 一、PN结的形成</h4><p><img src="https://i.loli.net/2018/09/05/5b8ff92fdce69.jpg" alt=""></p><h5 id="1浓度差引发扩散运动"><a class="markdownIt-Anchor" href="#1浓度差引发扩散运动"></a> 1.浓度差引发扩散运动</h5><p>N区的多子为自由电子，P区的多子是空穴，在N区和P区的交界处，自由电子和空穴发生<code>复合</code>，两者复合重新变回稳定的共价键，两者多子的浓度也随之减少，从N区的一头到交界处，从P区的一头到交界处，多子的浓度逐渐降低，<code>形成浓度差</code>。伴随着浓度差的形成，N区和P区的多子发生<code>扩散运动</code>，以带正电荷的空穴的运动反向为正方向，<strong>粒子的扩散运动是从P区到N区</strong>。</p><p><img src="https://i.loli.net/2018/09/05/5b8ff8524a15e.jpg" alt="1.1.3b"></p><h5 id="2扩散运动导致空间电荷区的形成"><a class="markdownIt-Anchor" href="#2扩散运动导致空间电荷区的形成"></a> 2.扩散运动导致空间电荷区的形成</h5><p>空间电荷区又叫做*<u>耗尽层</u><em>，</em><u>内电场</u>*，多子的复合运动使得交界处附近出现了一处多子空白区，里面只有无法自由移动的<code>正负离子</code>。以空穴的移动方向为正方向，此时<strong>扩散运动的方向为从左往右</strong>。</p><h5 id="3空间电荷区内的内电场"><a class="markdownIt-Anchor" href="#3空间电荷区内的内电场"></a> 3.空间电荷区内的内电场</h5><p>扩散运动导致耗尽层的形成，耗尽层里没有少子与多子，只剩下不可移动的正负离子，**产生电位差，形成内电场 **。<strong>电场的方向为从右向左</strong>，P区的多子空穴在受到内电场的电场力的作用下向左运动，N区的多子自由电子受到内电场电场力的作用下向右运动，形成漂移运动。以正电荷，也就是空穴的运动方向为正方向，<strong>漂移运动的方向就是从右向左。</strong></p><h5 id="4扩散运动和漂移运动的动态平衡"><a class="markdownIt-Anchor" href="#4扩散运动和漂移运动的动态平衡"></a> 4.扩散运动和漂移运动的动态平衡</h5><p>在开始阶段，<strong>扩散运动速度快</strong>，<strong>扩散运动又使得内电场得到加强</strong>，间接加强了漂移运动，随着P区和N区的多子不懂发生复合，其浓度不断减低，<strong>扩散运动不断削弱</strong>。我们上面已经分析过了扩散运动与漂移运动<code>方向相反</code>，随着扩散运动不断减弱，漂移运动不断加强，它们会<strong>在一个时间点达到平衡</strong>，虽然此时两者还在进行，但这两个相反的运动一直在相互抵消，这就是我所说的<code>动态平衡</code>。此时，PN结正式形成。</p><h4 id="二-pn结的单向导电性"><a class="markdownIt-Anchor" href="#二-pn结的单向导电性"></a> 二、PN结的单向导电性</h4><h5 id="1pn结两端加正向电压导通"><a class="markdownIt-Anchor" href="#1pn结两端加正向电压导通"></a> 1.PN结两端加正向电压导通</h5><p>正向电压：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一章 常用的导体器件&lt;/p&gt;
&lt;h2 id=&quot;11半导体基础知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11半导体基础知识&quot;&gt;&lt;/a&gt; 1.1半导体基础知识&lt;/h2&gt;
&lt;h3 id=&quot;111本征半导体&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#111本征半导体&quot;&gt;&lt;/a&gt; 1.1.1本征半导体&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt; &lt;code&gt;纯净&lt;/code&gt; 的具有&lt;code&gt;晶体结构&lt;/code&gt;的半导体&lt;/p&gt;
&lt;p&gt;&lt;code&gt;纯净：无杂质&lt;/code&gt;            &lt;code&gt;晶体结构：稳定的结构&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="模拟电路" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/"/>
    
      <category term="课堂笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>电路分析</title>
    <link href="http://yoursite.com/2018/09/04/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/09/04/电路分析/</id>
    <published>2018-09-04T14:09:18.000Z</published>
    <updated>2018-10-05T15:16:32.142Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一个方向：关联和关联参考方向</strong></p><p><strong>两个约束：基尔霍夫定理和元件VCR</strong> <code>Voltage Current Relation</code></p><p><strong>三个分析：网孔分析、节点分析、叠加原理</strong></p><p><strong>四个元件：电阻元件、电流源、电压源、受控源</strong></p><a id="more"></a><h1 id="第一篇总论和电阻电路的分析"><a class="markdownIt-Anchor" href="#第一篇总论和电阻电路的分析"></a> 第一篇总论和电阻电路的分析</h1><h2 id="集总参数电路中的电流-电压的约束关系"><a class="markdownIt-Anchor" href="#集总参数电路中的电流-电压的约束关系"></a> 集总参数电路中的电流、电压的约束关系</h2><h3 id="1-1-电路及集总电路模型"><a class="markdownIt-Anchor" href="#1-1-电路及集总电路模型"></a> 1-1 电路及集总电路模型</h3><p><strong>1.集总电路：由电阻、电容、电感等集总参数元件组成的电路称为集总电路</strong></p><p>注意：课本<strong>第一篇</strong>所讨论的集总电路是指只由电阻元件和电源元件组成的<code>电阻电路</code>，本书其它篇还会讨论集总电路的另一个类别：<code>动态电路</code>。</p><p><strong>2.当实际的电路尺寸远小于使用时最高工作频率所对应的波长时，可以用几种集总电路元件构成实际部、器件，即可以被称为集总电路。</strong></p><h3 id="1-2-电路变量-电流-电压及功率"><a class="markdownIt-Anchor" href="#1-2-电路变量-电流-电压及功率"></a> 1-2 电路变量 电流、电压及功率</h3><h4 id="1电流"><a class="markdownIt-Anchor" href="#1电流"></a> 1.电流</h4><p>定义：单位时间通过导体横截面的电荷量，用<code>i</code>来表示</p>ⅈ(t)=\frac{\mathrm{d}q}{\mathrm{d}t}<h5 id="1电流的分类"><a class="markdownIt-Anchor" href="#1电流的分类"></a> 1.电流的分类</h5><ol><li>恒定电流：大小和方向都不会发生变化的电流 <code>direct current</code>[DC]</li><li>时变电流：非恒定电流  <code>time varying current</code></li><li>交变电流：大小和方向都以周期性变化的电流 <code>alternating current</code>[AC]</li></ol><h5 id="2电流的参考方向"><a class="markdownIt-Anchor" href="#2电流的参考方向"></a> 2.电流的参考方向</h5><p>参考方向 <code>reference direction</code>：为了在复杂电路中事先确定电流的方向</p><ul><li>参考方向可以随意设定，但一旦设定将无法更改</li><li>与参考方向相同的电流取正，与参考方向相反的电流取负</li></ul><h4 id="2电压"><a class="markdownIt-Anchor" href="#2电压"></a> 2.电压</h4><p>定义：电压又叫做点位差，a点与b点之间的电位差等于单位电荷从a点移动到b点所失去的能量</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mrow><mi mathvariant="normal">d</mi></mrow><mi>w</mi></mrow><mrow><mrow><mi mathvariant="normal">d</mi></mrow><mi>q</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">u(t)=\frac{\mathrm{d}w}{\mathrm{d}q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">u</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.6860000000000002em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">d</span></span><span class="mord mathit" style="margin-right:0.03588em;">q</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">d</span></span><span class="mord mathit" style="margin-right:0.02691em;">w</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><h5 id="1电压的分类"><a class="markdownIt-Anchor" href="#1电压的分类"></a> 1.电压的分类</h5><ol><li>直流电压/恒定电压：大小和方向都不会发生变化的电压</li><li>时变电压：电压的大小和极性都随时间变化</li><li>交流电流：电压的大小和极性随时间周期性变化</li></ol><h5 id="2电压的极性"><a class="markdownIt-Anchor" href="#2电压的极性"></a> 2.电压的极性</h5><p>参考极性 <code>reference polarity[待考证]</code>：为了在复杂电路中事先确定电压的方向</p><ul><li>参考极性可以随意设定，但一旦设定将无法更改</li><li>与参考极性相同的电压取正，与参考极性相反的电压取负与参考方向相同的电流取正，与参考方向相反的电流取负</li></ul><h4 id="3-功率"><a class="markdownIt-Anchor" href="#3-功率"></a> 3. 功率</h4><p>定义：电路中某一段所吸收或提供能量的速率</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi mathvariant="normal">d</mi></mrow><mi>w</mi><mo>=</mo><mi>u</mi><mrow><mi mathvariant="normal">d</mi></mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">\mathrm{d}w=u\mathrm{d}q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">d</span></span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mrel">=</span><span class="mord mathit">u</span><span class="mord displaystyle textstyle uncramped"><span class="mord mathrm">d</span></span><span class="mord mathit" style="margin-right:0.03588em;">q</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mrow><mi mathvariant="normal">d</mi></mrow><mi>w</mi></mrow><mrow><mrow><mi mathvariant="normal">d</mi></mrow><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>u</mi><mrow><mi mathvariant="normal">d</mi></mrow><mi>q</mi></mrow><mrow><mrow><mi mathvariant="normal">d</mi></mrow><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">p(t)=\frac{\mathrm{d}w}{\mathrm{d}t}=\frac{u\mathrm{d}q}{\mathrm{d}t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">d</span></span><span class="mord mathit">t</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">d</span></span><span class="mord mathit" style="margin-right:0.02691em;">w</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">d</span></span><span class="mord mathit">t</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">u</span><span class="mord textstyle uncramped"><span class="mord mathrm">d</span></span><span class="mord mathit" style="margin-right:0.03588em;">q</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>(</mo><mi>t</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mrow><mi mathvariant="normal">d</mi></mrow><mi>q</mi></mrow><mrow><mrow><mi mathvariant="normal">d</mi></mrow><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">i(t)=\frac{\mathrm{d}q}{\mathrm{d}t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">i</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">d</span></span><span class="mord mathit">t</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">d</span></span><span class="mord mathit" style="margin-right:0.03588em;">q</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>p</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><mrow><mi>i</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mi>u</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\frac{p(t)}{i(t)}=u(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.427em;"></span><span class="strut bottom" style="height:2.363em;vertical-align:-0.936em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">i</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span><span style="top:-0.2300000000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit">u</span><span class="mopen">(</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span></span></p>p(t)=i(t)×u(t)<h5 id="1功率的方向"><a class="markdownIt-Anchor" href="#1功率的方向"></a> 1.功率的方向</h5><p>参考方向：为了在复杂电路中事先确定功率的方向</p><p>人们把能量流动的方向称为功率的方向</p><ul><li>功率的参考方向可以随意设定，但一旦设定将无法更改</li><li>与功率的参考方向相同时，功率取正，反之取负</li></ul><h4 id="4关联与非关联"><a class="markdownIt-Anchor" href="#4关联与非关联"></a> 4.关联与非关联</h4><h5 id="1电流与电压的关联"><a class="markdownIt-Anchor" href="#1电流与电压的关联"></a> 1.电流与电压的关联</h5><p>定义：当电流的参考方向与电压的<code>+</code>到<code>-</code>的方向相同时，成电流与电压关联，否则为非关联</p><p><strong>注意</strong> ：电流与电压一般是关联参考方向，所以在画集总电路时只需画电流参考方向或电压参考极性</p><h5 id="2电流-电压-功率的关联"><a class="markdownIt-Anchor" href="#2电流-电压-功率的关联"></a> 2.电流、电压、功率的关联</h5><h3 id="1-3-基尔霍夫定律"><a class="markdownIt-Anchor" href="#1-3-基尔霍夫定律"></a> 1-3 基尔霍夫定律</h3><h4 id="1一些概念"><a class="markdownIt-Anchor" href="#1一些概念"></a> 1.一些概念</h4><ul><li>二端元件：二端元件是指有两个外接引出端子的元件</li><li>支路：<code>branch</code>每一个二段元件视为一条支路</li><li>节点：<code>node</code>支路的连接点称为节点</li><li>回路：<code>loop</code> 电路中任一闭合路径称为回路</li><li>网孔：<code>mesh</code>在回路内部不含其它支路的回路叫网孔</li></ul><p><img src="https://i.loli.net/2018/09/06/5b9131c8d5e11.jpg" alt=""></p><h4 id="2基尔霍夫电流定律kcl"><a class="markdownIt-Anchor" href="#2基尔霍夫电流定律kcl"></a> 2.基尔霍夫电流定律(KCL)</h4><p>定义：对于任一集总电路的任一节点，在任一时刻，流出(或流入)该节点的所有支路电流代数和为零，其数学表达式为：</p>\begin{equation*}\sum_{k=1}^Ki_k(t)=0\end{equation*}<p><img src="https://i.loli.net/2018/09/06/5b9134517c6b4.jpg" alt=""></p><p>解：设流进反向为正反向，由KCL可得：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mn>1</mn><mo>−</mo><mi>i</mi><mn>2</mn><mo>−</mo><mi>i</mi><mn>3</mn><mo>+</mo><mi>i</mi><mn>4</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">i1-i2-i3+i4=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">i</span><span class="mord mathrm">1</span><span class="mbin">−</span><span class="mord mathit">i</span><span class="mord mathrm">2</span><span class="mbin">−</span><span class="mord mathit">i</span><span class="mord mathrm">3</span><span class="mbin">+</span><span class="mord mathit">i</span><span class="mord mathrm">4</span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span></span></p><p>我们必须知道的是，KCL是电荷守恒在电路中的体现</p><h4 id="3基尔霍夫电压定律kvl"><a class="markdownIt-Anchor" href="#3基尔霍夫电压定律kvl"></a> 3.基尔霍夫电压定律(KVL)</h4><p>定义：对于任一集总电路中的任一回路，在任一时刻，沿着该回路的所有电路的电压降的代数和为零，其数学表达式为：</p>\begin{equation*}\sum_{k=1}^Ku_k(t)=0\end{equation*}<p>​   <img src="https://i.loli.net/2018/09/29/5baf6c5c3bcc4.jpg" alt="1"></p><p>解：设顺时针的方向为电压降方向，由KVL得：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msub><mi>u</mi><mn>1</mn></msub><mo>+</mo><msub><mi>u</mi><mn>2</mn></msub><mo>+</mo><msub><mi>u</mi><mn>3</mn></msub><mo>+</mo><msub><mi>u</mi><mn>3</mn></msub><mo>+</mo><msub><mi>u</mi><mn>4</mn></msub><mo>−</mo><msub><mi>u</mi><mn>5</mn></msub><mo>−</mo><msub><mi>u</mi><mn>6</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">-u_1+u_2+u_3+u_3+u_4-u_5-u_6=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.64444em;"></span><span class="strut bottom" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord">−</span><span class="mord"><span class="mord mathit">u</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">u</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">u</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">3</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">u</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">3</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">u</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">4</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit">u</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">5</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit">u</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">6</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathrm">0</span></span></span></span></span></p><p>我们必须知道的是，KVL是能量守恒在电路中的体现</p><h3 id="1-4-电阻元件"><a class="markdownIt-Anchor" href="#1-4-电阻元件"></a> 1-4 电阻元件</h3><h5 id="1vcrvoltage-current-relation"><a class="markdownIt-Anchor" href="#1vcrvoltage-current-relation"></a> 1.VCR(voltage current relation)</h5><p>电路是由元件构成的，各种元件都有自己精确的定义，由此可以确定每一个元件电压和电流的关系。</p><h5 id="2电阻"><a class="markdownIt-Anchor" href="#2电阻"></a> 2.电阻</h5><p>电阻(resistor)是从实际电路中抽象化的模型，用来反映电阻器对电流呈现阻力的性能</p><p>线性电阻：由欧姆定律定义的电阻元件称为线性电阻元件，该元件满足：</p>u(t)=R_i·i(t)]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一个方向：关联和关联参考方向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两个约束：基尔霍夫定理和元件VCR&lt;/strong&gt; &lt;code&gt;Voltage Current Relation&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三个分析：网孔分析、节点分析、叠加原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四个元件：电阻元件、电流源、电压源、受控源&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="电路分析" scheme="http://yoursite.com/tags/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90/"/>
    
      <category term="课题笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大物实验</title>
    <link href="http://yoursite.com/2018/09/03/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/09/03/大物实验/</id>
    <published>2018-09-03T12:57:43.000Z</published>
    <updated>2018-10-06T02:48:36.187Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/10/06/5bb8226ff02d2.jpg" alt="大型粒子对撞机"></p><a id="more"></a><h1 id="大物实验"><a class="markdownIt-Anchor" href="#大物实验"></a> 大物实验</h1><h1 id="第一部分测量误差"><a class="markdownIt-Anchor" href="#第一部分测量误差"></a> 第一部分：测量误差</h1><h2 id="一-误差的分类"><a class="markdownIt-Anchor" href="#一-误差的分类"></a> 一、误差的分类</h2><h3 id="一系统误差"><a class="markdownIt-Anchor" href="#一系统误差"></a> （一）系统误差</h3><p>**1.定义：**在相同的实验条件下，对相同的实验对象进行重复测量，其误差的<code>绝对值</code>和<code>符号</code>都<code>保持恒定或以可以预知的方式变化</code>，这样的误差成为系统误差。[教材第5页]</p><p><strong>2.来源：</strong></p><ul><li>实验装置和实验方法不能满足理论上的要求，测量方法不完善。比如说在用电子天平测量物体的时候，在不去皮的情况下要求天平上没有其它物体，但在现实里是不可能的。</li><li>测量仪器精确度不够，比如说尺子在制造的时候因为工艺不完善照成的刻度放大。</li><li>环境的影响。比如说温度造成游标卡尺热胀冷缩。</li></ul><p>**3.处理方法：**由于系统误差的结果固定，如果不校准(手动消除)系统误差，<code>直接加到结果上</code>。[待考证]</p><h3 id="二随机误差"><a class="markdownIt-Anchor" href="#二随机误差"></a> (二）随机误差</h3><p>**1.定义：**在相同的实验条件下，在对相同的被测量物进行重复测量时，其误差的绝对值和符号以不可预知的方式变化，这样的误差称为随机误差。[教材第5页]</p><p>**2.处理方法：**多次测量的算术平均值作为真值的最佳估算值</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>x</mi></mrow></msub><mo>=</mo><msqrt><mfrac><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi></mrow></msubsup><mrow><mo>(</mo><mi>x</mi><mo>−</mo><mover accent="true"><mrow><mi>x</mi></mrow><mo>¯</mo></mover><msup><mo>)</mo><mn>2</mn></msup></mrow></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></msqrt></mrow><annotation encoding="application/x-tex">S_{x}=\sqrt\frac{\sum_{j=1}^{n}{(x-\bar{x})^2}}{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.0372839999999997em;"></span><span class="strut bottom" style="height:3.04003em;vertical-align:-1.0027460000000001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.24728399999999984em;"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size4">√</span></span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord reset-textstyle displaystyle textstyle cramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.826118em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord textstyle cramped"><span class="mopen">(</span><span class="mord mathit">x</span><span class="mbin">−</span><span class="mord accent"><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathit">x</span></span></span><span style="top:0em;margin-left:0.05556em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="accent-body"><span>¯</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose"><span class="mclose">)</span><span class="vlist"><span style="top:-0.289em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span><span style="top:-1.9572839999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span></span></p><h2 id="二-测量结果的表示"><a class="markdownIt-Anchor" href="#二-测量结果的表示"></a> 二、测量结果的表示</h2>x=x_{0}\pm \varDelta  , E=\frac{\varDelta}{x_{0}}×100\%<ul><li>X：被测量的量值</li><li>Δ：总不确定度\绝对不确定度</li><li>E：相对不确定度</li></ul><h2 id="三-总不确定度"><a class="markdownIt-Anchor" href="#三-总不确定度"></a> 三、总不确定度</h2><h3 id="两个分量"><a class="markdownIt-Anchor" href="#两个分量"></a> 两个分量</h3><h4 id="一a类分量"><a class="markdownIt-Anchor" href="#一a类分量"></a> （一）A类分量</h4>\varDelta_{A}\approx S_{x}=\sqrt\frac{\sum_{j=1}^{n}{(x-\bar{x})^2}}{n-1}<h4 id="二b类分量"><a class="markdownIt-Anchor" href="#二b类分量"></a> （二）B类分量</h4><h5 id="1机械仪器"><a class="markdownIt-Anchor" href="#1机械仪器"></a> 1.机械仪器</h5><table><thead><tr><th>仪器名称</th><th>量程</th><th>最小分度</th><th>仪器误差</th></tr></thead><tbody><tr><td>米尺</td><td>——</td><td>1mm</td><td>±0.5mm</td></tr><tr><td>游标卡尺</td><td>125mm</td><td>0.02mm</td><td>±0.02mm</td></tr><tr><td>螺旋测微器</td><td>0~25mm</td><td>0.01mm</td><td>±0.004mm</td></tr><tr><td>指针式电流</td><td>——</td><td>——</td><td>里程×等级(%)</td></tr></tbody></table><h5 id="2数字仪器"><a class="markdownIt-Anchor" href="#2数字仪器"></a> 2.数字仪器</h5><p>仪器误差为该仪器的分辨率</p><h4 id="三不确定度的合成"><a class="markdownIt-Anchor" href="#三不确定度的合成"></a> （三）不确定度的合成</h4>\varDelta=\sqrt{(\varDelta_{A})^2+(\varDelta_{B})^2}<p>即：</p>\varDelta=\sqrt{(S_{x})^2+(\varDelta_{仪器})^2}]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/06/5bb8226ff02d2.jpg&quot; alt=&quot;大型粒子对撞机&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="课堂笔记" scheme="http://yoursite.com/tags/%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    
      <category term="大物实验" scheme="http://yoursite.com/tags/%E5%A4%A7%E7%89%A9%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>战争热中的冷思考——张召忠</title>
    <link href="http://yoursite.com/2018/08/24/%E6%88%98%E4%BA%89%E7%83%AD%E4%B8%AD%E7%9A%84%E5%86%B7%E6%80%9D%E8%80%83%E2%80%94%E2%80%94%E5%BC%A0%E5%8F%AC%E5%BF%A0/"/>
    <id>http://yoursite.com/2018/08/24/战争热中的冷思考——张召忠/</id>
    <published>2018-08-24T10:58:43.000Z</published>
    <updated>2018-10-06T02:42:35.994Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://media.contentapi.ea.com/content/dam/bf/en-us/migrated-images/2017/04/bf4-levolution-2-wtrmrk.jpg.adapt.crop16x9.817w.jpg" alt="图为游戏战地"></p><a id="more"></a><h3 id="军事热中的冷思考-张召忠"><a class="markdownIt-Anchor" href="#军事热中的冷思考-张召忠"></a> “军事热”中的冷思考  张召忠</h3><p>​正当全球闹轰轰地大裁军的时候，在中国城乡的街头巷尾却掀起了一股“军事热”，花花绿绿的报刊杂志封面格外抢眼，坦克、飞机、大炮、航母与香车和美女的玉照一起打扮着萧条的书市和破破烂烂的书摊，让人颇有一股刚柔相济、风马牛不相及之感。知道行情的国内人士，大概了解这是一股正在兴起的“军事热”，大写手和一流炒家们在培育着似懂非懂的新一代“兵器谜”，而痴迷于兵器的人们又在用力烘托着一个没有基础、缺乏内涵的书报市场，“军事热”的泡沫就此被不断地酿造和膨胀。不知情的外国人，比如初来乍到的外国游客，或者新近刚刚到任的外国驻华武官，要是到书摊、书市上转悠一圈，非给他们吓坏了不可，我想他们发回国内的第一份报告可能就是：“中国正在扩军备战，全民正在大搞军备竞赛，战争似有一触即发之势”。</p><p>​这究竟是一种什么现象？全民国防观提高的一个重要表征？人民关心国防、关心军队现代化建设的一种图腾？科学普及事业的高度发达？还是一种社会虚无主义、超现实主义、唯利是图及恐高（恐惧高技术）主义的大显露？</p><h4 id="一-军事热是怎样兴起来的"><a class="markdownIt-Anchor" href="#一-军事热是怎样兴起来的"></a> 一、“军事热”是怎样兴起来的？</h4><p>​一说到军事问题，通常习惯用的词有这么几个：国防热，军事热，战争热，兵器热，凡是迷恋这些问题的人，大家就称他们为XX谜，如兵器谜、军事迷等。所以，当你看到“军事热”这个词的时候，肯定很生份，好像满大街都在卖军火似的，几乎无报不涉军事，涉军事无不涉兵器。不管什么报刊杂志，无论什么文章内容，编辑、记者们总喜欢配上几张不三不四、不着边际的武器装备图片，搞得到处杀气腾腾，火药味极浓。这股“军事热”是什么时候兴起来的呢？对此，我没有做过详细考证，但凭着我自己的从业经验来判断，大致经历了这么三个阶段：<br>第一阶段，1991年海湾战争爆发之前。1991年海湾战争爆发之前的历史相当长，最远可追溯到2500多年以前的春秋战国时代。此间，世界及中国都发生了数千次大规模战争，武器装备也从冷兵器、热兵器发展到核武器和信息化武器，装备、战争和战略都发生了一系列根本的革命性变化。但是，回顾这些历史，你会发现一个有趣的现象，在那么漫长的历史过程中，尽管有那么多令人激动的时刻和重大变革，但关于武器装备、战争、军事方面的文章、图片、图书却少得可怜，撰稿的作者基本上局限于专职研究人员，业余作者极少，即便是有些人对兵器、作战感兴趣，也只是喜欢阅读、收藏和供聊天吹牛时有点谈资而已。国家为了进行科学普及，曾拨专款长期资助出版了一系列科普读物，其中坚持下来的有《兵器知识》、《舰船知识》和《航空知识》等杂志。在报纸方面，可能只有《解放军报》涉及这方面的内容，但在此之前的军报并没有开辟专刊、专栏专门刊载武器装备的文章，只是在科技栏目中有所涉及，文章并不是很多。其他公开发行的报纸很少涉及军事内容，更谈不上介绍武器装备这样专门的知识。电视、广播在此之前虽然有一些军事方面的节目，但没有专门介绍武器装备的栏目，更没有对正在进行中的重大事件和战争进行现场评述的节目。<br>​第二阶段，1991年海湾战争至1998年“沙漠惊雷”行动。1990年开始的海湾危机和1991年的海湾战争，历时半年之久、数十个国家参加、真刀真枪地较量、陆、海、空三军全面参战，外加电子战、航天侦察和核、生、化武器的威胁，使这场战后以来最大规模的现代化战争具有极大的神秘感，因此对军事爱好者来说更是具有极大的吸引力。海湾战争期间，在新闻宣传方面，一开始的几天内，广播、电视、报刊等媒体基本上用较大篇幅进行了现况报道，但没有对战况进行军事评述。一场突如其来的现代化战争，一下子打破了人们对战争、军事的那种神秘感，人们期望透过各种媒体去了解和掌握现代化战争的特点和规律。虽然除在当天的少量新闻中有所披露外，老百姓基本上搞不清楚谁参战了，打得怎么样，用什么武器装备作战，战争中有哪些特点和规律，与二次世界大战相比有哪些不同等等。海湾战争前后的那段时间，是第二次世界大战以来最热闹的一个转型期，苏联解体，东欧剧变，车臣战争，波黑战争，华约集团分崩离析，美国出兵巴拿马、索马里和海地等等，这一系列战争和突发事件给军事创作注入了新的活力。作品内容更加丰富多彩，从而吸引了大量军事爱好者。<br>第三阶段，1998年“沙漠惊雷”行动以后。1998年2月，美国纠集英国等一些西方国家的数十艘舰船、数百架飞机云集波斯湾，对伊拉克进行威胁和恐吓，战争大有一触即发之势。当时，中央电视台第一次向战争发生的最前沿派出了一批勇敢而年轻的记者，他们是中国军事新闻事业的开拓者，是第一批战地电视新闻记者。习惯于看转播外国人拍摄的战地新闻的中国观众，突然能够看到海事卫星转播的中央台记者的战地采访，这在当时是一个很大的轰动。当时，中央台还准备了一个大举措，就是伊拉克、美国、北京三地记者、专家、主持人现场直播，这在中国电视历史上也是第一次，直播非常成功，军事专家进入中央电视台的直播室，这是中国新闻改革的一大步，反映了对专家学者的高度信任。中央电视台的这一系列大手笔、大运作，对各新闻媒体是一个巨大的促进。于是，关于危机、冲突和战争题材的报道、评论、武器装备等一下子就火了起来，特别是到了中国使馆被炸之后，军事题材报道的火爆程度达到历史最高点。这说明人们的关注点集中在重大事件、现代战争和国家安全问题上了。很快，一个空前的“军事热”迅速兴起，各媒体异军突起，许多军事报刊、军事杂志开始创刊，老的一些报刊杂志也开辟军事专题、专版、专栏、副刊、周刊、特刊等，国防和军事出版单位积极组织军事图书的出版，各省市电台、电视台纷纷效仿，也设置了军事栏目……一时间，中国居然出现了洛阳纸贵的繁荣景象，无论是军事类、时事政治类还是生活类、娱乐类媒体都开始炒作军事题材。就在千军万马热炒军事的过程中，横刺里杀出一支劲旅，不少专业性网站又加入了军事题材的炒作热潮，使本来就非常热闹的“军火市场”更加热闹非凡。</p><h4 id="二-为什么会兴起军事热"><a class="markdownIt-Anchor" href="#二-为什么会兴起军事热"></a> 二、为什么会兴起“军事热”？</h4><p>​“军事热”已经成为当前的一种社会现象，所以认真探究其兴起的缘由，有利于我们清醒地认识问题和思考问题。上面三个阶段，是我根据个人参与军事理论研究和报道工作的体会总结归纳出来的，只是一孔之见，大家不必认真追究，只是为了分析问题方便而已。根据上面的三个阶段，我个人认为，“军事热”的兴起，主要有下面两个方面的原因：</p><h5 id="关心国防关注军事心系国家安危"><a class="markdownIt-Anchor" href="#关心国防关注军事心系国家安危"></a> **关心国防，关注军事，心系国家安危 **</h5><p>​据我多年观察，关心国防、热爱军事的受众大致有三类人构成：一类是中年人和老年人。他们有的受过战争的洗礼，有的有过军旅生活的亲身经历，有的一直从事军工生产或军事科研，有的虽未曾有过此类经历，但对军队和军事装备很感兴趣。他们希望透过军事图书、报刊、杂志和广播、电视节目，抚摸军事的脉搏，追忆流逝的军中岁月。另一类是广大的青、少年群体，特别是中学生、大学生和工厂、企事业单位及社会上的年轻人。这些人最大的特点是精力充沛，喜欢猎奇，求知欲强烈，追求现代、新潮和时髦。由于国防和军事秘而不宣、鲜为人知的故事和事件较多，加之现代化武器装备的发展更给军队增添了不少神秘感，所以许多年轻人抱着密海探幽的极大兴趣，加入到军事爱好者的行列之中。这些人和中老年人不同，他们以猎奇为主，鉴赏力较差，许多人只是出于兴趣和爱好，所以欣赏军事的层次普遍较低。<br>​最后一类是最“酷”的一族，即“军事发烧友”。这是一个奇怪的群体，年龄有老有少，职业有军有民有学有工。他们是军事作品的铁杆儿读者，有些人现在已经加入到军事炒作的热潮中来，成为酿造军事泡沫的积极分子。这个群体中的每一个人对国防和军事都达到痴迷的程度，在这方面花费颇多，用时很长，如痴如醉，长此以往，那种执著劲儿令人非常感动。这些人当中有许多人在某些方面已经达到相当专业的程度，《兵器知识》杂志社的编辑中就有一些毛遂自荐的军事谜。有一位参谋长告诉我，他们部队搞演习，一时间找不到外军某些类型武器装备的图片和资料，结果他的军事谜儿子帮了部队的大忙。我经常被一些军事谜死缠烂打，他们问的问题一般都很高深，很难回答，很难对付。</p><h5 id="现代传播技术的广泛使用和市场竞争机制的运行"><a class="markdownIt-Anchor" href="#现代传播技术的广泛使用和市场竞争机制的运行"></a> **现代传播技术的广泛使用和市场竞争机制的运行 **</h5><p>​在90年代以前，特别是80年代以前，没有人上网查阅资料，广播、电视中看到点国际新闻也十分有限，专门的研究人员主要是通过特许订购的国外期刊来研究外军武器装备和军事问题，而外国的期刊当然是用外文印刷的，所以，在中国的研究机构中很长一个历史时期内曾经出现过一种很特殊的职业，叫做外军研究、情报研究、资料翻译等。基本的流程是这样的：外文资料如果人家是1月份出版，我们2-3月份才能看到，翻译和情报人员经过筛选后有选择地翻译、编译和综述，然后提交内部资料和报刊发表。如果是刊物，出版周期很长，至少三个月，如果是1月份的新闻，最早的发表时间就只能延长到6-7月份。90年代以后，因特网的出现，使信息传递近乎实时，如果是在网上发表文章，几个小时就可发表出去。另外，扫描、复印、印刷等设备的使用，都大大提高了文字处理和存储能力，使信息获取、处理、分析、加工、出版的周期大大缩短。信息技术的这些巨大变化，以及市场竞争机制的确立，加剧了媒体之间的竞争，如何争取读者是关乎媒体生存和发展的大计。<br>​在和平时期，国民的国防意识淡漠，国家安全观念很少引起人们的重视，军队的地位也因此而有所降低，在这种情况下所出现的“军事热”应该说是件大好事。这种“军事热”现象对提高国民的国防观念和国家安全意识有利，对普及科学技术知识有利，对提高公民的军事文化素质有利，对年轻一代放眼世界、争夺21世纪的制高点有利，对净化社会环境、保护青少年免受不健康文艺作品的腐蚀和侵袭有利，对密切军民关系有利……既然是件大好事，社会各界应该积极支持和维护这种“军事热”，多生产一些健康的精神食粮献给这些军事读者、热心观众和听众，使这支队伍逐步扩大和发展。应该看到，“军事热”的最高热点不会持续很久，现在的军事读者的水平和鉴赏能力已经提高，更希望读到一些品味更高、更有水平和观点的作品。所以，军事文化作品在打假的同时，还应注意提高自身的素质和修养，以生产出更多高质量的产品奉献给读者和观众，只有这样，才能将这种“军事热”维持下去。</p><h4 id="三-面对军事热为何要冷思考"><a class="markdownIt-Anchor" href="#三-面对军事热为何要冷思考"></a> 三、面对“军事热”为何要冷思考？</h4><p>​“军事热”对于唤起民众的国防意识，增强人民的国防观念，密切军民之间的关系，培养军队后备人才，加强军队现代化建设等无疑是非常重要的，主流是好的，是值得肯定的。但是，应该看到，任何事务都是一分为二的，没有绝对的热，也没有绝对的冷。热是件好事，但热总得有个温度，太热了可能会熔化，如果化为乌有还有什么用？太冷了当然更不好，所以我想与大家共同探索一下关于“军事热”的热度问题。从辩证法来看，有“军事热”必然就有“军事冷”，不可能永远热下去。如何正确地利用这种热能，使之产生某种对国防建设和军队现代化建设有利的效能应该是我们考虑的重点。</p><h5 id="军事热中的两种反常现象"><a class="markdownIt-Anchor" href="#军事热中的两种反常现象"></a> **“军事热”中的两种反常现象 **</h5><p>​据我观察，在席卷全国的“军事热”中长期存在着一个很反常的现象：许多“军事发烧友”反而对国防、军队和安全表现冷漠。从整个社会来看，近年来出现了多种热。歌星、影星、球星的追随者们由于种种热而形成各种各样的追星族，他们对自己所追之星了如指掌，但对科学家、军事家、高技术等军事常识确一无所知或所知甚少。许多军事迷则不同，他们对于军事装备和现代兵器的名称和战术技术性能如数家珍，侃侃而谈，表现出极大的热情、兴趣和爱好。但是，你如果问他是否愿意参军或考军校，他可能立刻告诉你那不是他的志向，他不愿当个“傻大兵”；你如果问他军事战略、国际局势、国防和国家安全，甚至国民的责任和义务等层次高一点的问题，他可能表现的一无所知或所知甚少；有些一掷千金的经理和老板虽然也是军事迷，你如果问他可否为军队现代化建设、高技术装备的发展和进行国防教育捐款，他可能毫不犹豫地告诉你，他更关心的是经济效益，他认为他和他的企业与你动员他所捐助的国防、国家安全等事业没有多少联系，因为国防不会给他带来多大经济实惠。这说明，我们的“军事热”是在“玩儿军事”，这样火爆的“军火市场”，可能会培养出一批兵器方面的“侃哥、侃爷”，但却很难培养出一大批热爱国防、献身国防事业的爱国主义者。</p><h4 id="恶性炒作贻害无穷"><a class="markdownIt-Anchor" href="#恶性炒作贻害无穷"></a> **恶性炒作贻害无穷 **</h4><p>​上面提到的反常现象难道不值得我们认真思考一下吗，究竟是什么原因？我感到恶性炒作是一大祸源。国防和军事是一个非常严肃的题材，战争是一种杀人的学问，武器装备是科学技术的物化产物，这些东西无论从哪个角度来看，都不可能像台湾来的张惠妹和我们大陆自己产的还珠格格等窈窕淑女那样成为被炒作的对象。很奇怪，“军事热”中许多的热度确实是被炒作出来的。<br>​书商是炒作的主要源泉。书商为什么要炒作？最主要的是繁荣图书市场，为国防和军队现代化服务，这是一个最大的宗旨，我相信出版社和编辑部都会为这样的宗旨而工作。其次，可能有个利益牵引的问题，说白了就是发行量，就是怎样多赚钱的问题。怎样才能多赚钱呢？只有火爆。可怎样才能火爆呢？找名人写名篇，或以名人之名搭配杂乱之物，达到混水摸鱼的效果。我所认识的名人中很少有人愿意为炒作而作文的，我自己就曾经为此而得罪过不少人。目标是火爆，手段是炒作，措施可以各行其能，许多问题坏事就坏在这里。有些选题很世俗，很没有意思，很没有深度，但书商认为能赚钱，结果就干上了。书摊上各种报刊都放在那里，读者买谁的？这就要看如何才能吸引人了，所以才有了华而不实的大标题，才有了令人恐怖的大照片，才有了子虚乌有的假新闻。假冒伪劣产品之所以猖獗，与顾客没有责任心和缺乏监督力有很大关系。一件真品1000元，如果花100元买一件假冒产品，顾客会感到很充实，很高兴。于是，假冒就逐渐形成了产业，大行其道。书刊市场也是这样，如果那些粗制滥造的东西没有人买，怎么会孕育出一个那么大的市场？<br>​恶性炒作和酿造泡沫的做法非常有害：首先，宣扬伪科学。军事类报刊上主要是刊载一些武器装备的文章和图片，各家刊载的内容大同小异，主要是看版面处理和美术编辑的花样如何。从网上扒下来武器装备图片，再从武器装备手册中翻腾几条说明，然后就大标题一挂，大幅照片一登，便隆重推出。每每看到这些东西，我都感到心寒，很恶心的样子，因为太低俗。在中国的书市上，你看不到一本《海底两万里》那样的传世佳作，科学幻想、科学普及的图书很少，一些武器装备介绍的图书到处都是，这算什么？这怎么能够算是科普作品呢？没有科学原理的介绍，没有科学规律的探索，没有一点点科学的创新，阅读后给人留不下任何印象，这种东西只能是信息时代的垃圾。从东西方观念来看，西方人比较重视未来研究，东方则更注重传统经验。100多年前，法国科幻小说家儒勒•凡尔纳的许多设想目前都已经成为现实。从西方的军事文艺作品来看，习惯于创作一些未来的军事战争和军事装备作品，如《从大西洋底来的人》、《星球大战》、《未来战士》、《超人》等，相反，在这方面我们确很少，更多的是反复炒传统和历史，比如三国、西游、红楼梦、宫廷争斗以及三个和尚等。<br>​其次，宣扬虚无主义。在中国的领土上，堂而皇之的用那么多版面、文字和报刊来介绍一些美国等发达国家的武器装备，有什么意思？当然，我们学习和借鉴是需要的，但仅仅凭装备外形就能学习和借鉴了吗？我们的宣传和研究如果只是停留在这样一个档次上不是很可笑吗？不加分析随随便便地大量报道外国、特别是台湾的武器装备，还特别加上如何如何先进、怎样怎样无敌之类的煽情造势之词，你是要干什么？是要说明人家有这玩意儿咱没有，人家的东西比咱们的先进，你瞧，要是真打起来，咱哪是个儿？这不是宣传虚无主义吗？整天都是这些东西，在人们眼里这些玩意儿就是高技术武器，这简直是误导。有时我在想，如果我们的报刊刊载的不是外国武器装备，而是美国的洗衣机、电冰箱、空调和计算机，老百姓会有什么感觉？你这不是在给人家老外做免费广告吗？这不是冒傻气儿吗？这不是帮着人家来吓唬自己人，打算灭掉咱们自己的民族工业吗？<br>​最后，宣扬暴力犯罪。小孩子从小就喜欢兵器是件好事，但需要讲明白道理，比如一架飞机，它是怎样飞起来的？为什么能飞那么快？导弹是怎样发射出去的等等，让孩子从小有一种神秘感，求知欲，用这样的方式来培养他们的创新意识。如果报刊上总是简单地刊载一些兵器图片，或者如何如何先进的性能指标，那肯定会引导人们去对比，数数儿，看看美国有多少飞机、多少舰艇，什么年代的，航程多少，装多少枚导弹等等，朋友们在一起吹牛都拿这些东西来说事儿。长此以往，如果过多地宣扬这些东西，很可能造就一批军事狂、武器狂、战争狂，培养出一批喜欢打仗，喜欢惹事儿，喜欢暴力的犯罪分子。前些年就曾经出现过一些怪事，有的杂志刊登并出售希特勒和日本军国主义者的军服、佩刀、武器和徽章等，你军事谜可以前去买一套，把自己打扮成纳粹军官或者日本武夫，然后准备干什么呢？一个遭受侵略和奴役的民族怎么就忘记了那些悲惨的往事，反而回过头来替帝国主义招魂呢？我真担心，我们一些不负责任的报道，一些过度炫耀武力和兵器的宣传，会培养和造就一些未来危及和平与安全的好战分子或恐怖分子。<br>​国防和军事问题是非常繁杂的，有很高深的学问，通常来讲光靠爱好是没有办法精通这些问题的。你可能自己感到懂了许多，但你那些知识可能只是些皮毛，没有实质性的突破，所以不要坐井观天，应该多学习、多研究、慎下笔。武器装备在国防和军队建设中是一个基础性的东西，武器装备只有和人、战法、军事理论、军事谋略结合起来，才能发挥应有的作用。所以，你光介绍兵器容易误导读者，在介绍兵器时不进行宏观综合的分析，又容易起反作用。所以，我强烈呼吁：我们的军事类报刊，应该把重点放到三个方面来进行宣传报道：一是未来高技术局部战争的特点和规律。就是未来战争什么样？怎么打？我们面临哪些威胁和挑战，要让老百姓清楚才行。二是高技术武器装备的现状、特点及趋势。要介绍高技术武器装备的原理和趋势，不仅要介绍其先进性，而且要分析其弱点，要打破不可战胜的神话。三是要宣传国防和军队建设。重点是增强全民的国防观念，提高人民的国防意识，号召人民热爱国防，关心军队建设，增强军民关系，搞好人民战争的准备，在自己的岗位上如何为增强综合国力、民族凝聚力和战争潜力而作出贡献。<br>​从事军事写作、编辑和出版的同志们为我国的国防和军队建设事业做出了巨大的贡献，本文所述绝无意攻击任何人、任何报刊，只是对当前这种奇怪现象提出质疑，希望引起各方面的重视，如有不妥，欢迎大家讨论指正。<br>（完稿于2000年6月24日）</p><p>​</p><p>​</p><p>​</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://media.contentapi.ea.com/content/dam/bf/en-us/migrated-images/2017/04/bf4-levolution-2-wtrmrk.jpg.adapt.crop16x9.817w.jpg&quot; alt=&quot;图为游戏战地&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="http://yoursite.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="张召忠" scheme="http://yoursite.com/tags/%E5%BC%A0%E5%8F%AC%E5%BF%A0/"/>
    
      <category term="战争" scheme="http://yoursite.com/tags/%E6%88%98%E4%BA%89/"/>
    
      <category term="军事" scheme="http://yoursite.com/tags/%E5%86%9B%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>GPIO的硬件情况与软件配置</title>
    <link href="http://yoursite.com/2018/08/17/GPIO/"/>
    <id>http://yoursite.com/2018/08/17/GPIO/</id>
    <published>2018-08-17T15:52:24.000Z</published>
    <updated>2018-09-08T09:14:52.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-gpio接口的情况"><a class="markdownIt-Anchor" href="#一-gpio接口的情况"></a> 一、GPIO接口的情况</h1><h2 id="1-数量与编号"><a class="markdownIt-Anchor" href="#1-数量与编号"></a> 1、数量与编号</h2><p>STM32F103VE-EK中的V储存着该芯片的引脚位数信息</p><p>V代表本开发板有144个引脚，但需要注意的是，这144个引脚并非全都是GPIO引脚</p><a id="more"></a><h3 id="11-gpio引脚的组"><a class="markdownIt-Anchor" href="#11-gpio引脚的组"></a> 1.1 GPIO引脚的组</h3><p>从<code>GPIOA</code> 到<code>GPIOG</code> ，总共有<strong>七组</strong> GPIO引脚</p><p>每一组GPIO接口有0——15 <strong>16</strong> 个引脚，需要十分要注意的是<strong>并没有第16号接口</strong></p><p>总结：总共具有7*16=112个GPIO接口</p><p><img src="https://i.loli.net/2018/08/12/5b6fa1c1c2a52.png" alt="引脚图"></p><h2 id="2-功能与性质"><a class="markdownIt-Anchor" href="#2-功能与性质"></a> 2、功能与性质</h2><p>在文件 <a href="https://www.bilibili.com/video/av8938442/?p=10" target="_blank" rel="external">STM32F103RTC.pdf</a>中有关于GPIO引脚的详细说明。现对该表格进行解释</p><p><img src="https://i.loli.net/2018/08/12/5b6fb36ec3850.png" alt="GPIOPIN"></p><p>可以看到该表格总共有6大列</p><h4 id="21第一列pins-主要表现的是该引脚在不同型号开发板上的序号"><a class="markdownIt-Anchor" href="#21第一列pins-主要表现的是该引脚在不同型号开发板上的序号"></a> 2.1第一列：Pins 主要表现的是该引脚在不同型号开发板上的序号</h4><ul><li>例如所有类型的开发板都有PB4这个引脚，其中，在LQFP144(我的STM32F103VE就是属于这一类)中，这个引脚就是它的第134号引脚</li></ul><h4 id="22第二列pin-name-这个不用说了就是引脚的名字"><a class="markdownIt-Anchor" href="#22第二列pin-name-这个不用说了就是引脚的名字"></a> 2.2第二列：Pin name 这个不用说了，就是引脚的名字</h4><ul><li>例如这个PB4就代表B组GPIO接口的4号(第5号接口)</li></ul><h4 id="23-第三列type-引脚的类型"><a class="markdownIt-Anchor" href="#23-第三列type-引脚的类型"></a> 2.3 第三列：Type 引脚的类型</h4><ul><li>主要也I/O型和S型</li><li>I/O型就是指<strong>I</strong>nput and <strong>O</strong>utput型，即输入输出型</li><li>S型就是指 Supply型，也就是供应型，但具体有什么含义还有待研究</li></ul><h4 id="24-第四列io-level-是否可容忍5v电压"><a class="markdownIt-Anchor" href="#24-第四列io-level-是否可容忍5v电压"></a> 2.4 第四列：I/O Level 是否可容忍5v电压</h4><ul><li>具有<code>FT</code> 标识的就是能够容忍5v电压的引脚，其中<code>FT</code> 代表5 (<strong>F</strong>ive)  V <strong>T</strong>olerant</li><li>无此标记的引脚只能最高容忍3.3V的电压</li></ul><h4 id="25第五列main-functions-引脚的主要功能通用功能"><a class="markdownIt-Anchor" href="#25第五列main-functions-引脚的主要功能通用功能"></a> 2.5第五列：Main functions 引脚的主要功能(通用功能)</h4><p><strong>即GPIO功能，当做普通的I/O引脚使用。</strong></p><p>复位期间和刚复位后，复用功能未开启，I/O端口被配置成<code>浮空输入模式</code>(CNFx[1:0]=01b，MODEx[1:0]=00b)。 复位后，JTAG引脚被置于<code>输入上拉</code>或<code>下拉模式</code>：</p><ul><li>PA15：JTDI置于上拉模式</li><li>PA14：JTCK置于下拉模式</li><li>PA13：JTMS置于上拉模式</li><li>PB4： JNTRST置于上拉模式</li></ul><p>当作为输出配置时，写到输出数据寄存器上的值(GPIOx_ODR)输出到相应的I/O引脚。可以以推挽模式或开漏模式(当输出0时，只有N-MOS被打开)使用输出驱动器。</p><p>输入数据寄存器(GPIOx_IDR)在每个APB2时钟周期捕捉I/O引脚上的数据。</p><p>所有GPIO引脚有一个内部弱上拉和弱下拉，当配置为输入时，它们可以被激活也可以被断开。</p><h4 id="26-第六列alternate-functions-可选择的功能-复用功能"><a class="markdownIt-Anchor" href="#26-第六列alternate-functions-可选择的功能-复用功能"></a> 2.6 第六列：Alternate functions (可选择的功能) 复用功能</h4><ul><li><p>分为<code>默认(Default)</code>和<code>重映射功能(Remap)</code></p></li><li><p>即片内外设，包括<code>UART</code>、<code>SPI</code>、<code>CAN</code>、<code>I2C</code>等等，开启这些外设的功能，就是使用了系统的复用功能。</p><p>复用功能有两种：没有重映像、重映像（包括部分重映像、完全重映像），使用引脚用作AFIO功能，同样需要对其进行配置。</p></li></ul><p><img src="https://i.loli.net/2018/08/12/5b6fbfe581be7.png" alt="PB4"></p><p>举个例子：在我的144引脚的STM32F103VE中，PB4是第134号引脚，此引脚为I/O(输入输出引脚)，具有容忍5V高压的能力，主要功能是NJTRST，<a href="https://zhidao.baidu.com/question/684409963134390172.html" target="_blank" rel="external">NJTRST是仿真器调试时的JTAG对内核的调试复位信号，一般用于信号调试，建议不要用作他用。</a> 可选功能中的默认功能是SPI3_MISO，其中的重映射功能是PB4 / TIM3_CH1和SPI1_MISO</p><h1 id="二-gpio的几种模式"><a class="markdownIt-Anchor" href="#二-gpio的几种模式"></a> 二、GPIO的几种模式</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></div><div class="line">&#123; </div><div class="line">  GPIO_Mode_AIN = <span class="number">0x0</span>,     <span class="comment">/* 模拟输入 */</span></div><div class="line">  GPIO_Mode_IN_FLOATING = <span class="number">0x04</span>,<span class="comment">/* 输入浮空 */</span></div><div class="line">  GPIO_Mode_IPD = <span class="number">0x28</span>,<span class="comment">/* 输入下拉 */</span></div><div class="line">  GPIO_Mode_IPU = <span class="number">0x48</span>,<span class="comment">/* 输入上拉 */</span></div><div class="line">      </div><div class="line">  GPIO_Mode_Out_OD = <span class="number">0x14</span>,<span class="comment">/* 开漏输出 */</span></div><div class="line">  GPIO_Mode_Out_PP = <span class="number">0x10</span>,<span class="comment">/* 推挽式输出 */</span></div><div class="line">  GPIO_Mode_AF_OD = <span class="number">0x1C</span>,<span class="comment">/* 开漏复用 输出 */</span></div><div class="line">  GPIO_Mode_AF_PP = <span class="number">0x18</span><span class="comment">/* 推挽式复用 输出 */</span></div><div class="line">&#125;GPIOMode_TypeDef;</div></pre></td></tr></table></figure><h2 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h2><h3 id="1模拟输入gpio_mode_ain-0x0"><a class="markdownIt-Anchor" href="#1模拟输入gpio_mode_ain-0x0"></a> 1.模拟输入<code>(GPIO_Mode_AIN = 0x0)</code></h3><p><img src="https://i.loli.net/2018/08/13/5b71285a294f4.png" alt="模拟"></p><h4 id="模拟输入analog-input"><a class="markdownIt-Anchor" href="#模拟输入analog-input"></a> <strong>模拟输入</strong>：<strong>a</strong>nalog <strong>in</strong>put</h4><p>这个好理解，就是可以输入电压而非电平，输入的并非是0或1而是一个具体的电压值</p><h3 id="2浮空输入gpio_mode_in_floating-0x04"><a class="markdownIt-Anchor" href="#2浮空输入gpio_mode_in_floating-0x04"></a> 2.浮空输入<code>(GPIO_Mode_IN_FLOATING = 0x04)</code></h3><p><img src="https://i.loli.net/2018/08/13/5b717743e79a6.png" alt="浮空"></p><h4 id="浮空输入floating-input"><a class="markdownIt-Anchor" href="#浮空输入floating-input"></a> <strong>浮空输入</strong>：<strong>floating</strong> <strong>in</strong>put</h4><p>由于浮空输入<strong>一般多用于外部按键输入</strong>，结合图上的输入部分电路，我理解为浮空输入状态下，IO的电平状态是不确定的，完全由外部输入决定，如果在该引脚悬空的情况下，读取该端口的电平是不确定的。[<a href="https://baike.baidu.com/item/%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/6810953?fr=aladdin#ref_%5B1%5D_1106477" target="_blank" rel="external">来源</a>]</p><h3 id="3输入下拉gpio_mode_ipd-0x28"><a class="markdownIt-Anchor" href="#3输入下拉gpio_mode_ipd-0x28"></a> 3.输入下拉<code>(GPIO_Mode_IPD = 0x28)</code></h3><p><img src="https://i.loli.net/2018/08/13/5b7178791b100.png" alt="输入下拉"></p><h4 id="输入下拉input-down"><a class="markdownIt-Anchor" href="#输入下拉input-down"></a> <strong>输入下拉</strong>：<strong>in</strong>put <strong>d</strong>own</h4><p>下拉电阻的主要作用是与上接电阻一起在电路驱动器关闭时给线路（节点）以一个固定的电平。[<a href="https://baike.baidu.com/item/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB" target="_blank" rel="external">来源</a>]</p><p>同样还有下拉电阻它是为了保证无信号输入时输入端的电平为低电平。 [<a href="https://zhidao.baidu.com/question/332306095850748645.html" target="_blank" rel="external">来源</a>]</p><h3 id="4输入上拉gpio_mode_ipu-0x48"><a class="markdownIt-Anchor" href="#4输入上拉gpio_mode_ipu-0x48"></a> 4.输入上拉<code>(GPIO_Mode_IPU =0x48)</code></h3><p><img src="https://i.loli.net/2018/08/13/5b717b86a7967.png" alt="输入上拉"></p><h4 id="输入上拉input-up"><a class="markdownIt-Anchor" href="#输入上拉input-up"></a> <strong>输入上拉</strong>：<strong>in</strong>put <strong>u</strong>p</h4><p>在上拉电阻所连接的导线上，如果<code>外部组件</code><strong>未启用</strong>，上拉电阻则“微弱地”将输入电压信号“<strong>拉高</strong>”。当外部组件<strong>未连接</strong>时，对输入端来说，外部“看上去”就是高阻抗的。这时，通过上拉电阻可以将<code>输入端口处的电压</code><strong>拉高到高电平</strong>。如果外部组件<strong>启用</strong>，它将<strong><em>取消上拉电阻所设置的高电平</em> <strong>。通过这样，上拉电阻可以使<code>引脚</code>即使在</strong>未连接外部组件</strong>的时候也能<strong>保持确定的逻辑电平</strong>。 [<a href="https://baike.baidu.com/item/%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB/6810953?fr=aladdin#ref_%5B1%5D_1106477" target="_blank" rel="external">来源</a>]</p><p>上拉电阻的目的是为了保证在无信号输入时输入端的电平为高电平。而在信号输入为低电平是输入端的电平应该也为低电平。如果没有上拉电阻，在没有外界输入的情况下输入端是悬空的，它的电平是未知的无法保证的，上拉电阻就是为了保证无信号输入时输入端的电平为高电平，同样还有下拉电阻它是为了保证无信号输入时输入端的电平为低电平。[<a href="https://zhidao.baidu.com/question/332306095850748645.html" target="_blank" rel="external">来源</a>]</p><h2 id="输出较少用"><a class="markdownIt-Anchor" href="#输出较少用"></a> 输出(较少用)</h2><h3 id="1开漏输出gpio_mode_out_od-0x14"><a class="markdownIt-Anchor" href="#1开漏输出gpio_mode_out_od-0x14"></a> 1.开漏输出<code>(GPIO_Mode_Out_OD = 0x14)</code></h3><h4 id="开漏输出output-drain"><a class="markdownIt-Anchor" href="#开漏输出output-drain"></a> 开漏输出：<strong>o</strong>utput <strong>d</strong>rain</h4><p><img src="https://i.loli.net/2018/08/13/5b718200c53b9.png" alt="开漏输出"></p><h4 id="开漏输出open-drain-output"><a class="markdownIt-Anchor" href="#开漏输出open-drain-output"></a> <strong>开漏输出</strong>：<strong>O</strong>pen-<strong>D</strong>rain Output</h4><p>开漏输出就是不输出电压，低电平时接地，高电平时不接地。如果外接上拉电阻，则在输出高电平时电压会拉到上拉电阻的电源电压。这种方式适合在连接的外设电压比单片机电压低的时候。 [<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BC%8F%E8%BE%93%E5%87%BA/9644177" target="_blank" rel="external">来源</a>]</p><p>可以输出高，低电平，连接数字器件。推挽结构一般是指两个三极管分别受两互补信号的控制，总是在一个三极管导通的时候另一个截止。高低电平由IC的电源低定。推挽电路是两个参数相同的三极管或MOSFET，以推挽方式存在于电路中，各负责正负半周的波形放大任务，电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。[<a href="http://www.360doc.com/content/15/0113/16/20337528_440450286.shtml" target="_blank" rel="external">来源</a>]</p><h3 id="2推挽式输出gpio_mode_out_pp-0x10"><a class="markdownIt-Anchor" href="#2推挽式输出gpio_mode_out_pp-0x10"></a> 2.推挽式输出<code>(GPIO_Mode_Out_PP = 0x10)</code></h3><p><img src="https://i.loli.net/2018/08/13/5b718eb4aee27.png" alt="推挽式输出"></p><h4 id="推挽式输出push-pull-output"><a class="markdownIt-Anchor" href="#推挽式输出push-pull-output"></a> 推挽式输出：<strong>p</strong>ush-<strong>p</strong>ull output</h4><p><strong>注意：推挽式输出与开漏输出的区别只有在接Vdd的P-MOS</strong></p><p>可以输出高,低电平,连接数字器件;推挽结构一般是指两个三极管分别受两互补信号的控制,总是在一个三极管导通的时候另一个截止 [<a href="https://baike.baidu.com/item/%E6%8E%A8%E6%8C%BD%E8%BE%93%E5%87%BA?fromtitle=%E6%8E%A8%E6%8C%BD%E5%BC%8F%E8%BE%93%E5%87%BA&amp;fromid=2725066" target="_blank" rel="external">来源</a>]</p><p>推挽模式，有外接上拉电阻时， 逻辑1， 上拉电阻两端电压都是3.3V，PIN输出为高电平。 [<a href="http://www.eeworld.com.cn/mcu/article_2017092734789.html" target="_blank" rel="external">来源</a>]</p><h3 id="3开漏复用输出gpio_mode_af_od-0x1c"><a class="markdownIt-Anchor" href="#3开漏复用输出gpio_mode_af_od-0x1c"></a> 3.开漏复用输出<code>GPIO_Mode_AF_OD = 0x1C</code></h3><p><img src="https://i.loli.net/2018/08/13/5b71924662df3.png" alt="开漏复用输出"></p><h4 id="开漏复用输出alternate-function-of-output-drain"><a class="markdownIt-Anchor" href="#开漏复用输出alternate-function-of-output-drain"></a> <strong>开漏复用输出</strong>：Alternate-function of output drain</h4><p>可以理解为GPIO口被用作第二功能时的配置情况（即并非作为通用IO口使用）。 [<a href="https://blog.csdn.net/bailyzheng/article/details/8071864" target="_blank" rel="external">来源</a>]</p><h3 id="4推挽复用输出-gpio_mode_af_pp-0x18"><a class="markdownIt-Anchor" href="#4推挽复用输出-gpio_mode_af_pp-0x18"></a> 4.推挽复用输出 <code>GPIO_Mode_AF_PP = 0x18</code></h3><p><img src="https://i.loli.net/2018/08/13/5b7192b93289e.png" alt="推挽复用"></p><h4 id="推挽复用输出alternate-function-of-push-pull"><a class="markdownIt-Anchor" href="#推挽复用输出alternate-function-of-push-pull"></a> <strong>推挽复用输出</strong>：Alternate-function of push-pull</h4><p>同上</p><p>[<a href="https://blog.csdn.net/lostand/article/details/70052918" target="_blank" rel="external">关于开漏与推挽输出的区别的高级介绍</a>]</p><p>[<a href="https://blog.csdn.net/bailyzheng/article/details/8071864" target="_blank" rel="external">更多关于GPIO功能的介绍</a>]</p><h2 id="三-gpio接口的配置"><a class="markdownIt-Anchor" href="#三-gpio接口的配置"></a> 三、GPIO接口的配置</h2><p>**配置的主要过程有 **</p><blockquote><ul><li><p>配置时钟并使能</p></li><li><p>配置结构体</p></li><li><p>最后调用库函数初始化GPIO</p></li></ul></blockquote><h4 id="31-配置时钟并使能"><a class="markdownIt-Anchor" href="#31-配置时钟并使能"></a> 3.1 配置时钟并使能</h4><p>使用函数</p><blockquote><p>RCC_APB2PeriphClockCmd();</p></blockquote><p>该函数有两个形参，一个用来指明所要操作时钟的名称，一个选择开启还是关闭</p><p>这个函数的时钟有以下的选项可选</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">RCC_APB2Periph_AFIO              ((<span class="keyword">uint32_t</span>)<span class="number">0x00000001</span>)</div><div class="line">RCC_APB2Periph_GPIOA             ((<span class="keyword">uint32_t</span>)<span class="number">0x00000004</span>)</div><div class="line">RCC_APB2Periph_GPIOB             ((<span class="keyword">uint32_t</span>)<span class="number">0x00000008</span>)</div><div class="line">RCC_APB2Periph_GPIOC             ((<span class="keyword">uint32_t</span>)<span class="number">0x00000010</span>)</div><div class="line">RCC_APB2Periph_GPIOD             ((<span class="keyword">uint32_t</span>)<span class="number">0x00000020</span>)</div><div class="line">RCC_APB2Periph_GPIOE             ((<span class="keyword">uint32_t</span>)<span class="number">0x00000040</span>)</div><div class="line">RCC_APB2Periph_GPIOF             ((<span class="keyword">uint32_t</span>)<span class="number">0x00000080</span>)</div><div class="line">RCC_APB2Periph_GPIOG             ((<span class="keyword">uint32_t</span>)<span class="number">0x00000100</span>)</div><div class="line">RCC_APB2Periph_ADC1              ((<span class="keyword">uint32_t</span>)<span class="number">0x00000200</span>)</div><div class="line">RCC_APB2Periph_ADC2              ((<span class="keyword">uint32_t</span>)<span class="number">0x00000400</span>)</div><div class="line">RCC_APB2Periph_TIM1              ((<span class="keyword">uint32_t</span>)<span class="number">0x00000800</span>)</div><div class="line">RCC_APB2Periph_SPI1              ((<span class="keyword">uint32_t</span>)<span class="number">0x00001000</span>)</div><div class="line">RCC_APB2Periph_TIM8              ((<span class="keyword">uint32_t</span>)<span class="number">0x00002000</span>)</div><div class="line">RCC_APB2Periph_USART1            ((<span class="keyword">uint32_t</span>)<span class="number">0x00004000</span>)</div><div class="line">RCC_APB2Periph_ADC3              ((<span class="keyword">uint32_t</span>)<span class="number">0x00008000</span>)</div><div class="line">RCC_APB2Periph_TIM15             ((<span class="keyword">uint32_t</span>)<span class="number">0x00010000</span>)</div><div class="line">RCC_APB2Periph_TIM16             ((<span class="keyword">uint32_t</span>)<span class="number">0x00020000</span>)</div><div class="line">RCC_APB2Periph_TIM17             ((<span class="keyword">uint32_t</span>)<span class="number">0x00040000</span>)</div><div class="line">RCC_APB2Periph_TIM9              ((<span class="keyword">uint32_t</span>)<span class="number">0x00080000</span>)</div><div class="line">RCC_APB2Periph_TIM10             ((<span class="keyword">uint32_t</span>)<span class="number">0x00100000</span>)</div><div class="line">RCC_APB2Periph_TIM11             ((<span class="keyword">uint32_t</span>)<span class="number">0x00200000</span>)</div></pre></td></tr></table></figure><p>第二项状态有ENABLE和DISABLE可选</p><h4 id="32选择引脚"><a class="markdownIt-Anchor" href="#32选择引脚"></a> 3.2选择引脚</h4><h5 id="321先定义一个结构体"><a class="markdownIt-Anchor" href="#321先定义一个结构体"></a> 3.2.1先定义一个结构体</h5><p><code>GPIO_InitTypeDef GPIO_InitStructure;</code></p><p>我们到stm32f10x_gpio.h中可以看到，ST官方的库函数对这个结构体的定义是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">uint16_t</span> GPIO_Pin;           </div><div class="line">  GPIOSpeed_TypeDef GPIO_Speed;  </div><div class="line">  GPIOMode_TypeDef GPIO_Mode;    </div><div class="line">&#125; GPIO_InitTypeDef;</div></pre></td></tr></table></figure><p>可见该结构体主要有这个内容：</p><blockquote><p>GPIO_Pin：GPIO引脚，用来指引对某个IO接口进行操作</p><p>GPIOSpeed：GPIO引脚的速度，调速度，但是暂时不知道这个速度意味着什么</p><p>GPIO_Mode：GPIO引脚的模式，8种模式，上文已经介绍过了</p></blockquote><p>有关于GPIO引脚的翻转速度有以下取值：</p><blockquote><p>GPIO_Speed_10MHz<br>GPIO_Speed_2MHz<br>GPIO_Speed_50MHz</p></blockquote><h5 id="322-初始化结构的值"><a class="markdownIt-Anchor" href="#322-初始化结构的值"></a> 3.2.2 初始化结构的值</h5><p>就是分别对引脚、速度、模式经行初值赋值，比如说</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GPIO_initTypeDef GPIO_initStructures;</div><div class="line">GPIO_initStructures.GPIO_Pin=GPIO_Pin_8;</div><div class="line">GPIO_initStructues.GPIO_Speed=GPIO_Speed_50MHz;</div><div class="line">GPIO_initStructures.GPIO_Mode=GPIO_Mode_OUT_PP;</div></pre></td></tr></table></figure><h4 id="33-初始化gpio"><a class="markdownIt-Anchor" href="#33-初始化gpio"></a> 3.3 初始化GPIO</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GPIO_Init(<span class="name">GPIOX</span>, <span class="symbol">&amp;GPIO_InitStructure</span>)<span class="comment">;</span></div></pre></td></tr></table></figure><p>其中的GPIOX是指引脚组名，比如说GPIOA</p><h3 id="四-gpio接口的使用"><a class="markdownIt-Anchor" href="#四-gpio接口的使用"></a> 四、GPIO接口的使用</h3><p>GPIO_SetBits 寄存器：BSRR</p><p>GPIO_ResetBits 寄存器：BRR</p><p>GPIO_WriteBit 寄存器：BSRR BRR</p><p>GPIO_Write 寄存器：ODR</p><table><thead><tr><th style="text-align:left">函数</th><th>寄存器</th><th>用处</th></tr></thead><tbody><tr><td style="text-align:left">GPIO_SetBits</td><td>BSRR</td><td>置某一个引脚为高电平</td></tr><tr><td style="text-align:left">GPIO_ResetBits</td><td>BRR</td><td>置某一个引脚为低电平</td></tr><tr><td style="text-align:left">GPIO_WriteBit</td><td>BSRR BRR</td><td>单个置0或1</td></tr><tr><td style="text-align:left">GPIO_Write</td><td>ODR</td><td>一次给多个引脚赋值，注意是16位的</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-gpio接口的情况&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-gpio接口的情况&quot;&gt;&lt;/a&gt; 一、GPIO接口的情况&lt;/h1&gt;
&lt;h2 id=&quot;1-数量与编号&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-数量与编号&quot;&gt;&lt;/a&gt; 1、数量与编号&lt;/h2&gt;
&lt;p&gt;STM32F103VE-EK中的V储存着该芯片的引脚位数信息&lt;/p&gt;
&lt;p&gt;V代表本开发板有144个引脚，但需要注意的是，这144个引脚并非全都是GPIO引脚&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="STM32" scheme="http://yoursite.com/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>在我的博客上插入b站视频</title>
    <link href="http://yoursite.com/2018/08/17/%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91/"/>
    <id>http://yoursite.com/2018/08/17/插入视频/</id>
    <published>2018-08-17T10:28:56.000Z</published>
    <updated>2018-08-17T12:28:20.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-问题的开端"><a class="markdownIt-Anchor" href="#一-问题的开端"></a> 一、问题的开端</h3><p>我们知道，有些时候在博客里添加一些视频是再好不过的事情了，但是我只试过插入图片，对插入视频这一种比较复杂的操作还一无所知。根据我的了解，markdown语法还兼容HTML语言，或许可以从这方面入手。</p><p>在markdown文本里，如何输入视频呢？，我经过查阅资料，发现b站是有一个分享嵌入代码的功能</p><a id="more"></a><p><img src="https://i.loli.net/2018/08/17/5b768f5139f7d.png" alt="嵌入代码分享"></p><h3 id="二-看似有用的解决方法"><a class="markdownIt-Anchor" href="#二-看似有用的解决方法"></a> 二、看似有用的解决方法</h3><p>所谓嵌入代码，就是可以被复制到markdown编辑器和富文本编辑器的一种HTML代码，在渲染之后可以直接显示播放窗口，但是我发现如果我直接使用b站的嵌入代码的话，播放效果极其的差，没有常见的窗口控制按钮，更无法全屏，只能在小得可怜的窗口上看，还被弹幕挡住了视野，具体如下：</p><p><img src="https://i.loli.net/2018/08/17/5b76904921556.png" alt="一般的播放效果"></p><h3 id="三-尝试改进"><a class="markdownIt-Anchor" href="#三-尝试改进"></a> 三、尝试改进</h3><p>经过查询，我在<a href="https://blog.csdn.net/ruingman/article/details/51393810" target="_blank" rel="external">这个网站</a>上发现了一种思路，敲入如下代码</p><blockquote><p>&lt;**iframe height=498 width=510 src=“<a href="http://player.youku.com/embed/XNjcyMDU4Njg0" target="_blank" rel="external">http://player.youku.com/embed/XNjcyMDU4Njg0</a>”&gt; **</p></blockquote><p>将你想播放的视频的地址替换到里面，注意，这个地址必须是嵌入的地址，如果输入成了页面地址，markdown就会把整个页面渲染出来，除了视频部分，这里就不发图了。</p><p>正常输入就能得到如下效果：</p><p><img src="https://i.loli.net/2018/08/17/5b7691347a3f1.png" alt="最终效果"></p><h3 id="四-还不够完美"><a class="markdownIt-Anchor" href="#四-还不够完美"></a> 四、还不够完美</h3><p>可以看见视频的播放界面比较完整，还能全屏播放，但是还是有一些不尽人意的地方，比如说：</p><blockquote><p>视频播放界面有二维码、弹幕吐槽、和上方的信息条阻挡，不够简洁</p><p>视频播放页面和整个背景的搭配不太好</p><p>视频无法居中显示</p></blockquote><h3 id="五-尽所能优化"><a class="markdownIt-Anchor" href="#五-尽所能优化"></a> 五、尽所能优化</h3><p>不幸的是发生了，经过后来测试，界面并不能全屏播放，全屏与不全屏的区别只是弹幕输入条的有无，这个问题暂时无解。</p><p>我们播放视频是用HTML语言的，那么HTML语言一定会有能让元素居中的方法，经过查询，我们找到了方法，只需在代码前后加</p><p align="center">和</p>,让视频居中，但是出现了视频框太靠下的问题，表现如下：<p></p><p><img src="https://i.loli.net/2018/08/17/5b76a33d3cdbe.png" alt="问题"></p><p>其实就是</p><p align="center">占了一格，改成如下形式就行了：</p><p><img src="https://i.loli.net/2018/08/17/5b76a3df39fb4.png" alt="优化"></p><p><strong>效果如下：</strong></p><p><img src="https://i.loli.net/2018/08/17/5b76a18253d19.png" alt="效果"></p><h3 id="六-最后的改进"><a class="markdownIt-Anchor" href="#六-最后的改进"></a> 六、最后的改进</h3><p>我还发现了一个bug，由于视频播放窗口的长宽高是固定值，在手机页面时会远远超出手机屏幕，根据HTML语法，我将播放窗口的长宽改成了auto也就是自动，这样视频播放器就能根据具体情况自动布置大小了。</p><p>但我发现还是无法同时适配手机和电脑，变现为</p><p><img src="https://i.loli.net/2018/08/17/5b76bc52bfe8f.png" alt="1"></p><p>最终我通过不断调整长度与宽度，长度为：250      宽度为：270 同时增加了源地址超链接</p><p>来自:</p><p><a href="https://www.bilibili.com/video/av29527174" target="_blank" rel="external">科技袁人：数学真实惠，一道题就够我做一个暑假了</a></p><p><a href="https://blog.csdn.net/ruingman/article/details/51393810" target="_blank" rel="external">Markdown插入视频和GIF</a></p><p><a href="https://zhidao.baidu.com/question/982370213986027659.html" target="_blank" rel="external">怎么让HTML里的播放器居中</a></p><p><a href="https://blog.csdn.net/ctlwy/article/details/54601865" target="_blank" rel="external">HTML5/CSS3手机自适应</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-问题的开端&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-问题的开端&quot;&gt;&lt;/a&gt; 一、问题的开端&lt;/h3&gt;
&lt;p&gt;我们知道，有些时候在博客里添加一些视频是再好不过的事情了，但是我只试过插入图片，对插入视频这一种比较复杂的操作还一无所知。根据我的了解，markdown语法还兼容HTML语言，或许可以从这方面入手。&lt;/p&gt;
&lt;p&gt;在markdown文本里，如何输入视频呢？，我经过查阅资料，发现b站是有一个分享嵌入代码的功能&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>蓝眼睛岛</title>
    <link href="http://yoursite.com/2018/08/17/%E8%93%9D%E7%9C%BC%E7%9D%9B%E5%B2%9B/"/>
    <id>http://yoursite.com/2018/08/17/蓝眼睛岛/</id>
    <published>2018-08-17T08:28:56.000Z</published>
    <updated>2018-10-06T03:38:05.201Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/10/06/5bb82de398b51.jpg" alt="看着我的眼镜"></p><a id="more"></a><p>逻辑的魅力总是想黑洞一样吸引着人们去探索，从祖母悖论到三国杀，人们总是沉浸在探索人类最困难未知的领域，为之花费大量时间。思考它们也能为我们解决很多问题。</p><p>今天是2018年8月17号，我在逛b站的时候看到这么一个有趣的视频</p><p align="center"> <iframe height="250" width="270" src="http://player.bilibili.com/player.html?aid=29527174&cid=51319132&page=1"></iframe></p>电脑浏览可能体验不太好，这里贴出[源地址](https://www.bilibili.com/video/av29527174)<p>视频讨论了一个由澳大利亚华人数学家陶哲轩提出的有趣的逻辑问题，它的原始表述是这样的：</p><blockquote><p>“在一个岛上，住着一个部落。这个部落由1000个人组成，这些人有多种眼睛颜色。他们有一种宗教信仰，禁止他们了解自己眼睛的颜色，甚至禁止他们讨论眼睛颜色这个话题。因此，每个居民都能看到所有其他居民的眼睛颜色，但却不能发现自己的眼睛颜色（这里没有镜子或者诸如此类的东西）。如果一个岛民知道了自己的眼睛颜色，那么他们的宗教就会强制他们第二天中午在村庄广场上自杀，让所有人都看到。所有的岛民都非常逻辑和非常虔诚，他们也都知道其他人也非常逻辑和非常虔诚。在这里，‘非常逻辑’的意思是，如果从岛民已知的信息和观察中可以推理出任何结论，那么岛民必定会知道这个结论。</p><p>实际上，在这1000个岛民中，100个人的眼睛是蓝色，900个人的眼睛是棕色。不过，岛民最初并不知道这些数据。因为，每个人只能看到除自己之外的999个人的眼睛颜色，看不到自己的眼睛颜色。</p><p>有一天，一个蓝眼睛的游客来到了岛上，并且获得了部落的完全信任。一天晚上，他向整个部落的人致辞，感谢他们的款待。</p><p>然而，由于不了解当地的风俗习惯，这位游客犯了一个错误，在他的讲话中提到了眼睛的颜色。他说了一句：‘真是有趣呀，在这里能看到像我这样的蓝眼睛的人！’</p><p>请问，游客的失言对部落会不会产生影响？如果有，是什么影响？”</p></blockquote><p>这个问题非常有趣，我曾经想过如果在一种条件下人长时间无法看到自己的脸，只能根据他人的描述想象自己的脸，如果有一天他看到了自己的脸会发什么，当然这个是个心理学问题，本文说讲的是逻辑学问题。</p><p>这位有名的数学家还十分乐于和群众们交流，在他提出了这个问题之后就有一些评论者试图绕过其逻辑设定，逃避正面回答问题，对此，陶哲轩也对此进行了强调，后拉有一位名叫xkcd的漫画家重新表述了这个问题以强调逻辑设定的“严密性”，表述如下：</p><blockquote><p>“一群眼睛颜色各异的人，住在一个岛上。他们都是完美的逻辑学家，也就是说，如果能从逻辑上推导出一个结论，他们就会立刻推导出来。没有人知道自己眼睛的颜色。每天午夜，会有一艘渡轮停靠在岛上。任何一个岛民如果知道了自己眼睛的颜色，就坐船离开这个岛，而剩下的人留在岛上。每个人都可以在任何时候看到其他人，并且记得他看到的每一种眼睛颜色的数量（当然不包括他自己），但是除此之外，他们就不能以其他方式交流了。岛上的每个人，都知道所有这些规则。</p><p>事实上，在这个岛上有100个蓝眼睛的人，100个棕眼睛的人，还有一个宗教领袖，她的眼睛是绿色的。所以，任何一个蓝眼人都能看到100个棕眼人、99个蓝眼人和一个绿眼人，但不知道自己眼睛的颜色。在他看来，除了那位宗教领袖之外，总的状况可能是101个棕眼人和99个蓝眼人（如果他自己是棕眼），或者100个棕眼人和100个蓝眼人（如果他自己是蓝眼），或者100个棕眼人和99个蓝眼人加上他自己有其他颜色的眼睛（比如说红色）。</p><p>有一天中午，宗教领袖站在所有的岛民面前，说：‘我看到岛上有蓝眼睛的人。’</p><p>请问，会不会有人离开岛？如果有的话，是哪些人在什么时候离开岛？”</p></blockquote><p>本文并不是想试图解决这个问题，而是单纯记下这个有趣的问题，待以后百无聊赖之时，能解一解，并不是说我十分厉害，只是觉得这种问题十分耗费时间，又比较有意义。</p><p><a href="https://user.guancha.cn/main/content?id=32232&amp;page=1" target="_blank" rel="external">奇妙的数学：蓝眼睛岛和强弱共识</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/06/5bb82de398b51.jpg&quot; alt=&quot;看着我的眼镜&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="有趣的问题" scheme="http://yoursite.com/categories/%E6%9C%89%E8%B6%A3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="逻辑" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>讨论与思考</title>
    <link href="http://yoursite.com/2018/08/17/%E6%97%A5%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/17/日记/</id>
    <published>2018-08-17T06:03:05.686Z</published>
    <updated>2018-10-06T03:32:43.779Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/10/06/5bb82ca7d513c.jpg" alt="享受日记"></p><a id="more"></a><p>​<em>有人说写日记会让人变得不愿意和交流，容易固执己见，但我总觉得，有些东西是只能同自己讲的，因为能和自己讨论一个话题或愿意和自己讨论一个话题的人太少了。</em></p><p>​以前对生活的微小操作往往会对现在和以后产生巨大的影响，这就是著名的*<a href="https://baike.baidu.com/item/%E8%9D%B4%E8%9D%B6%E6%95%88%E5%BA%94/13502#viewPageContent" target="_blank" rel="external">蝴蝶效应</a>*。乔布斯从来没有想过自己在斯坦福大学选修的一门书法课会帮助他创造出如此惊艳的作品——OSX。但不是每个人都怎么“幸运”，也并不是每个时候都这么“幸运”，当我们在某件事上遇到瓶颈的时候，往往感慨：要是我以前能怎么怎么样就好了。那何不未雨绸缪呢？与此同时，问题接踵而至：如何未雨绸缪？一种是跟随前辈的脚步，汲取前辈成功的经验，当然如果要从事字体设计的话最好跟随乔大师的脚步，从书法学起，但这一种做法目的性太强，太有“复制”的意味，并不是说这样不好，实际上除了英国，所有国家的工业革命都是从“复制”开始的，我只是说我们不应该仅仅满足与这样的方法论。我觉得我已经看过一个视频，讲的是微软为Windows 10制作Windows hero这一张著名壁纸的过程，令我感到意外的是，这张壁纸并不是P的，而是实际拍摄的，最近我还偶然看到Apple home的广告，这个广告十分炫酷，各种变换和光影交错十分令人着迷，但我还是没想到，这个广告的绝大部分场景也都是实拍的。曾经有人谈论到为何要用实拍而不用特效，我们先不讨论成本问题，显而易见的是，对于微软和苹果这样级别的公司，成本已经不是主要的考虑因素了。那为何他们仍要选择实拍呢？那就只能往效果方面考虑了。有人提到，倘若使用特效来做的话，作品的可能性就下降很多，我仔细一看Windows 10 的那张壁纸，确实有道理，一个由光影围绕的窗口周围，围绕着许多不规则的雾，我在对比其他人P出来了的壁纸，用我这个普通消费者的审美观来看，确实前者强很多。这样看来并不是所有伟大的作品都是由人类创造的，有许多是偶然的产物，古代炼丹被炸的道士，恐怕也不知道自己在那场改变人类历史的爆炸中添加了多少木炭和硫磺吧，说的更残酷一点，他甚至不知道他放了什么，就炸成了一场轰轰烈烈的技术革命。所以寻求有所成就也一样，很多时候我们是没有经验可循的，或者我们根本不知道有经验，所以我们就要适当地减少功利性去学习、接触一些事，到必要的时候，这些经历都会把人塑造成他该成为的样子。</p><p>我还想强调，这个世界没有我们想象地那么美好，但就是因为这样，我们的人生才有意义。有人说，如果人长生不老了，人生就失去了意义。我可能不太认同这个看法了。我记得我小时候曾经看过《七龙珠》里一个片段：悟空一行人与一个反派争夺龙珠，但不幸的是反派成功拿到了所有龙珠，所以反派向神龙许愿长生不老，神龙实现了他的愿望，就在这时，悟空一行人在最后关头打开了一个结界，不反派吸入了一个什么都没有的世界，我从反派无奈的呐喊中听出了他的绝望。那么问题来了，反派为什么期盼长生不老，为什么愿望实现了，还这么绝望呢？问题就出现在这个结界上。在没被结界吸入前，反派因为某种他认为不好的、无法抗拒的内外部条件，限制住了他，有可能他实力不足无法战胜比他强大地多的对手，想用不死之身实现绝地反击，有可能意识到了自己有一天会被死神打败而毫无反手之力，面对这么多的不美好，他决定用自己的力量和努力，改变这一切，但不幸的是这个结界里虽然没有他所想打败的一切，他可以用永久的时间来享受这般神的待遇，但他还是害怕、恐惧、极度拒绝进入到这个结界，为什么？恐怕他要的不是天下无敌的结果，而是天下无敌的过程，长生不老保证了他能一直、毫无悬念地打败一切他认为不美好的事物，结界的出现剥夺了他一切打败不美好事物的权力，只抛给他冷冰冰的结果，这时，长生不老更像一个诅咒，像一个凶狠却技术精湛的凌迟主刀手。只有具备打败一切不美好事物的胸怀，才能推动人的不断进步与发展，人的一生才会充满激情，等他回头看自己一生的时候，才不会因为虚度年华而感到悔恨。倘若我们真的生活在完美美好的乌托邦世界，我们是绝对不会幸福的。</p><p>但从另外一个角度讲，人生不仅需要浪漫与热情，也需要理性与沉思。有人说，很多从农村来的孩子会因为强烈的自尊心变得固执己见，意识不到自己的问题或者不愿意承认自己的错误，不太会知恩图报，我这里并不是地域黑，实际上，城乡的人文和自然条件已经对生活在其中的人造成了影响，这些影响中有好有坏，今天我只想讲一讲坏影响中的其中一个，仅就自己而言，作自我批评。我一直认为大脑是一种非常神奇的东西，任何数据经过了这个系统，会输出不同的值，这些不同的值有可以用一些粗浅的理论来预测一番，毫无疑问，这样的模式是十分有创造性同时也是较为可控的。同样，自身的缺点或许也能够通过一些理论来分析它们的源头。这个时候，毫无立场地思考、批判就远比一腔热情更重要了。这个是每一个人应当具备的能力。倘若热情是力量巨大提供动力的火箭发动机的话，思考就是灵活、精确指示方向的陀螺仪。还有一点，我现在意识到，世界上好像并没有正确和错误，只有合适与不合适，我们应当在一定的情景下，以一定的角度思考问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/06/5bb82ca7d513c.jpg&quot; alt=&quot;享受日记&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="http://yoursite.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="日记" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何配置hexo</title>
    <link href="http://yoursite.com/2018/08/17/hello-world/"/>
    <id>http://yoursite.com/2018/08/17/hello-world/</id>
    <published>2018-08-17T01:56:15.989Z</published>
    <updated>2018-09-04T13:28:43.772Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop.png" alt=""></p><blockquote><p><strong>本版本仅适用于Win环境</strong><br>本文关键字： <strong>Hexo绿色版</strong>，<strong>Hexo便携版</strong>，<strong>Hexo配置</strong>，<strong>Hexo</strong>，<strong>U盘</strong></p></blockquote><a id="more"></a><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>是一个快速、简洁且高效的博客框架，支持 GitHub Flavored Markdown 的所有功能；具有超快生成速度，让上百个页面在几秒内瞬间完成渲染；还拥有各式各样的插件等等。</p><p>但是就像很多教程里面写的那样，搭建 Hexo 本地环境，需要安装 Node.js、Git 以及使用 npm 进行安装和配置。这对于毫无经验的新手来说，是一个很大的挑战。同时，由于这些环境的存在，导致如果需要更换计算机的时候，重新安装配置一个新的Hexo环境，又得花费一些功夫。</p><p>所以呢，锵锵，我们整合了一个 Hexo 便携版，来简化本地环境的部署。</p><p>####<strong>版本介绍</strong><br>那么所谓的便携版到底是什么？便携版就是将 Hexo 本地环境所需要的各种依赖环境的整合到一起，做成的不需要安装的版本。</p><p>本便携版（Release 1.0.0）所包含的软件如下：</p><blockquote><ul><li>Git: 2.7.4</li><li>Nodejs: 6.10.1</li><li>Npm: 4.4.1</li><li>Hexo: 3.2.2</li></ul></blockquote><p>为了便携的需要，不能配置固定的环境变量，所以除此之外还有相应的批处理文件，下文将详细介绍。</p><p>####<strong>从零开始，1分钟搭建Hexo写作环境</strong><br>说了这么多，我们这就开始教你如何在1分钟内，从零开始搭建Hexo写作环境！</p><p>#####1 注册一个Github帐号</p><p>1.1 进入<a href="https://github.com" target="_blank" rel="external">Github</a>，并在右边的3个框框中分别填写 用户名、邮箱地址、账户密码，并点击 <strong><code>Sign up for Github</code></strong>;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop2.png" alt="图1.1.1"></p><p>1.2 进入欢迎页面后，点击**<code>Finish sign up</code>**;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop3.png" alt="图1.2.1"></p><p>1.3 进入到这一步之后（<strong>图1.3.1</strong>），先别记着点任何东西，查看你的邮箱，应该会收到如下的邮件（<strong>图1.3.2</strong>），确认你的邮件。否则，你会看到错误页面（<strong>图1.3.3</strong>）。query完毕之后在<strong>图1.3.1</strong>所示的页面，点击**<code>+ New repository</code>**;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop5.png" alt="图1.3.1"></p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop6.png" alt="图1.3.2"></p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop7.png" alt="图1.3.3"></p><p>1.4 请在红框中的 <strong><code>Repository name</code></strong> 里面输入 <strong><code>用户名.github.io</code></strong> ( <strong>用户名</strong> 就是你刚刚 <strong>步骤1.1</strong> 中注册的用户名)，然后点击 <strong><code>Create repository</code></strong>;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop8.png" alt="图1.4.1"></p><p>1.5 至此，Github网页注册的部分完毕</p><p>####2 下载HEXO Portable</p><p>2.1 访问我们的 <a href="https://project.bitmoe.cn/PortableHexo/" target="_blank" rel="external">HEXO Portable</a> 页面，或者 <a href="https://github.com/Bitmoe/PortableHexo" target="_blank" rel="external">Github仓库</a> 下载最新的便携版；</p><p>2.2 双击得到的自解压文件，解压到你需要安装博客的地方，可以选择硬盘或者U盘；</p><p>####3 配置你的环境</p><p>3.1 在你的博客的文件夹，你会发现很多批处理文件，我先介绍下各个文件的用途：</p><blockquote><ul><li>配置基本信息 &gt;&gt; 配置博客的基本环境</li><li>配置Github部署 &gt;&gt; 配置博客的部署</li><li>启动命令行 &gt;&gt; 启动带环境变量的Git-Bash，否则无法使用node、npm、git等命令</li><li>新建文章 &gt;&gt; 新建一篇文章</li><li>渲染并本地测试 &gt;&gt; 生成并本地预览</li><li>渲染并部署 &gt;&gt; 生成并部署到GitHub</li><li>重置配置文件 &gt;&gt; 重置_config.yml</li></ul></blockquote><p>3.2 我们继续进行环境配置，双击**<code>配置基本信息</code>**并按顺序输入以下信息：</p><blockquote><ul><li>主标题：顾名思义</li><li>副标题：顾名思义</li><li>描述：顾名思义</li><li>作者：顾名思义</li><li>网站地址：填写 <strong><a href="http://xn--eqr924avxo.github.io" target="_blank" rel="external">用户名.github.io</a></strong> （此处的用户名为<strong>步骤1.1</strong>中填写的用户名）<br><strong>如果您已经购买了域名，可以参看相关的文章！</strong></li></ul></blockquote><p>3.3 双击**<code>配置Github部署</code>**并按顺序输入以下信息：</p><blockquote><ul><li>Github的用户名：此处的用户名为<strong>步骤1.1</strong>中填写的用户名</li><li>Github注册邮箱：此处的注册邮箱为<strong>步骤1.1</strong>中填写的注册邮箱</li></ul></blockquote><p>3.4 输入完毕之后，会进行测试部署，等待屏幕提示<strong>下面将进行部署测试，稍后将有一个openssh的对话框出现，请输入你的github用户密码。<strong>的时候，按回车继续；（此处的用户密码为</strong>步骤1.1</strong>中填写的用户密码）</p><p>3.5 然后继续等待，此时屏幕会出现n多行，耐心等待即可；</p><p>3.6 等待屏幕提示<strong>请访问 <a href="https://xn--eqr924avxo.github.io" target="_blank" rel="external">https://用户名.github.io</a> 查看是否部署成功！<strong>的时候，在浏览器中输入</strong><a href="https://xn--eqr924avxo.github.io" target="_blank" rel="external">https://用户名.github.io</a> <strong>，理论上可以看到你的Hexo站点！（此处的用户名为</strong>步骤1.1</strong>中填写的用户名）</p><p>3.7 至此，你的Hexo环境就配置完成了，这样你的这个Hexo博客文件夹无论移动到哪一台电脑，都能通过<strong>启动命令行</strong>出现的bash命令行，或者其余便捷的批处理文件比如<strong>新建文章</strong>、<strong>渲染并本地测试</strong>、<strong>渲染并部署</strong>进行相应的操作。</p><p>3.8 如果你在配置中出错，可以运行<strong>重置配置文件</strong>后，再重复<strong>3.1~3.6步骤</strong></p><p>####4 开始享受纯粹的Hexo写作吧！</p><p>####5 备注</p><blockquote><ul><li>本便携版以及本文均使用 <a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="external">CC BY-NC-SA 4.0</a>协议；</li><li>本文所有权归 <a href="http://qistchan.com" target="_blank" rel="external">QistChan</a> &amp; <a href="https://wwww.bitmoe.com" target="_blank" rel="external">Bitmoe Inc.</a> 所有；</li><li>本便携版由 <a href="https://www.bitmoe.com" target="_blank" rel="external">Bitmoe Inc.</a> 维护并提供技术支持；</li><li>需要技术支持可以在<a href="https://github.com/Bitmoe/PortableHexo" target="_blank" rel="external">Github仓库</a> 提交**<code>Issues</code>**；</li><li>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://portablehexo.bitmoe.cn/hexopp/hexop.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本版本仅适用于Win环境&lt;/strong&gt;&lt;br /&gt;
本文关键字： &lt;strong&gt;Hexo绿色版&lt;/strong&gt;，&lt;strong&gt;Hexo便携版&lt;/strong&gt;，&lt;strong&gt;Hexo配置&lt;/strong&gt;，&lt;strong&gt;Hexo&lt;/strong&gt;，&lt;strong&gt;U盘&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
