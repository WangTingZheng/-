<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在我的博客上插入b站视频]]></title>
    <url>%2F2018%2F08%2F17%2F%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%2F</url>
    <content type="text"><![CDATA[一、问题的开端我们知道，有些时候在博客里添加一些视频是再好不过的事情了，但是我只试过插入图片，对插入视频这一种比较复杂的操作还一无所知。根据我的了解，markdown语法还兼容HTML语言，或许可以从这方面入手。 在markdown文本里，如何输入视频呢？，我经过查阅资料，发现b站是有一个分享嵌入代码的功能 二、看似有用的解决方法所谓嵌入代码，就是可以被复制到markdown编辑器和富文本编辑器的一种HTML代码，在渲染之后可以直接显示播放窗口，但是我发现如果我直接使用b站的嵌入代码的话，播放效果极其的差，没有常见的窗口控制按钮，更无法全屏，只能在小得可怜的窗口上看，还被弹幕挡住了视野，具体如下： 三、尝试改进经过查询，我在这个网站上发现了一种思路，敲入如下代码 &lt;iframe height=498 width=510 src=”http://player.youku.com/embed/XNjcyMDU4Njg0&quot;&gt; 将你想播放的视频的地址替换到里面，注意，这个地址必须是嵌入的地址，如果输入成了页面地址，markdown就会把整个页面渲染出来，除了视频部分，这里就不发图了。 正常输入就能得到如下效果： 四、还不够完美可以看见视频的播放界面比较完整，还能全屏播放，但是还是有一些不尽人意的地方，比如说： 视频播放界面有二维码、弹幕吐槽、和上方的信息条阻挡，不够简洁 视频播放页面和整个背景的搭配不太好 视频无法居中显示 五、尽所能优化不幸的是发生了，经过后来测试，界面并不能全屏播放，全屏与不全屏的区别只是弹幕输入条的有无，这个问题暂时无解。 我们播放视频是用HTML语言的，那么HTML语言一定会有能让元素居中的方法，经过查询，我们找到了方法，只需在代码前后加和,让视频居中，但是出现了视频框太靠下的问题，表现如下： 其实就是占了一格，改成如下形式就行了： 效果如下： 六、最后的改进我还发现了一个bug，由于视频播放窗口的长宽高是固定值，在手机页面时会远远超出手机屏幕，根据HTML语法，我将播放窗口的长宽改成了auto也就是自动，这样视频播放器就能根据具体情况自动布置大小了。 但我发现还是无法同时适配手机和电脑，变现为 最终我通过不断调整长度与宽度，长度为：250 宽度为：270 同时增加了源地址超链接 来自: 科技袁人：数学真实惠，一道题就够我做一个暑假了 Markdown插入视频和GIF 怎么让HTML里的播放器居中 HTML5/CSS3手机自适应]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蓝眼睛岛]]></title>
    <url>%2F2018%2F08%2F17%2F%E8%93%9D%E7%9C%BC%E7%9D%9B%E5%B2%9B%2F</url>
    <content type="text"><![CDATA[逻辑的魅力总是想黑洞一样吸引着人们去探索，从祖母悖论到三国杀，人们总是沉浸在探索人类最困难未知的领域，为之花费大量时间。思考它们也能为我们解决很多问题。 今天是2018年8月17号，我在逛b站的时候看到这么一个有趣的视频 电脑浏览可能体验不太好，这里贴出源地址 视频讨论了一个由澳大利亚华人数学家陶哲轩提出的有趣的逻辑问题，它的原始表述是这样的： “在一个岛上，住着一个部落。这个部落由1000个人组成，这些人有多种眼睛颜色。他们有一种宗教信仰，禁止他们了解自己眼睛的颜色，甚至禁止他们讨论眼睛颜色这个话题。因此，每个居民都能看到所有其他居民的眼睛颜色，但却不能发现自己的眼睛颜色（这里没有镜子或者诸如此类的东西）。如果一个岛民知道了自己的眼睛颜色，那么他们的宗教就会强制他们第二天中午在村庄广场上自杀，让所有人都看到。所有的岛民都非常逻辑和非常虔诚，他们也都知道其他人也非常逻辑和非常虔诚。在这里，‘非常逻辑’的意思是，如果从岛民已知的信息和观察中可以推理出任何结论，那么岛民必定会知道这个结论。 实际上，在这1000个岛民中，100个人的眼睛是蓝色，900个人的眼睛是棕色。不过，岛民最初并不知道这些数据。因为，每个人只能看到除自己之外的999个人的眼睛颜色，看不到自己的眼睛颜色。 有一天，一个蓝眼睛的游客来到了岛上，并且获得了部落的完全信任。一天晚上，他向整个部落的人致辞，感谢他们的款待。 然而，由于不了解当地的风俗习惯，这位游客犯了一个错误，在他的讲话中提到了眼睛的颜色。他说了一句：‘真是有趣呀，在这里能看到像我这样的蓝眼睛的人！’ 请问，游客的失言对部落会不会产生影响？如果有，是什么影响？” 这个问题非常有趣，我曾经想过如果在一种条件下人长时间无法看到自己的脸，只能根据他人的描述想象自己的脸，如果有一天他看到了自己的脸会发什么，当然这个是个心理学问题，本文说讲的是逻辑学问题。 这位有名的数学家还十分乐于和群众们交流，在他提出了这个问题之后就有一些评论者试图绕过其逻辑设定，逃避正面回答问题，对此，陶哲轩也对此进行了强调，后拉有一位名叫xkcd的漫画家重新表述了这个问题以强调逻辑设定的“严密性”，表述如下： “一群眼睛颜色各异的人，住在一个岛上。他们都是完美的逻辑学家，也就是说，如果能从逻辑上推导出一个结论，他们就会立刻推导出来。没有人知道自己眼睛的颜色。每天午夜，会有一艘渡轮停靠在岛上。任何一个岛民如果知道了自己眼睛的颜色，就坐船离开这个岛，而剩下的人留在岛上。每个人都可以在任何时候看到其他人，并且记得他看到的每一种眼睛颜色的数量（当然不包括他自己），但是除此之外，他们就不能以其他方式交流了。岛上的每个人，都知道所有这些规则。 事实上，在这个岛上有100个蓝眼睛的人，100个棕眼睛的人，还有一个宗教领袖，她的眼睛是绿色的。所以，任何一个蓝眼人都能看到100个棕眼人、99个蓝眼人和一个绿眼人，但不知道自己眼睛的颜色。在他看来，除了那位宗教领袖之外，总的状况可能是101个棕眼人和99个蓝眼人（如果他自己是棕眼），或者100个棕眼人和100个蓝眼人（如果他自己是蓝眼），或者100个棕眼人和99个蓝眼人加上他自己有其他颜色的眼睛（比如说红色）。 有一天中午，宗教领袖站在所有的岛民面前，说：‘我看到岛上有蓝眼睛的人。’ 请问，会不会有人离开岛？如果有的话，是哪些人在什么时候离开岛？” 本文并不是想试图解决这个问题，而是单纯记下这个有趣的问题，待以后百无聊赖之时，能解一解，并不是说我十分厉害，只是觉得这种问题十分耗费时间，又比较有意义。 奇妙的数学：蓝眼睛岛和强弱共识]]></content>
      <categories>
        <category>有趣的问题</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GPIO的硬件情况与软件配置]]></title>
    <url>%2F2018%2F08%2F17%2FGPIO%2F</url>
    <content type="text"><![CDATA[一、GPIO接口的情况1、数量与编号STM32F103VE-EK中的V储存着该芯片的引脚位数信息 V代表本开发板有144个引脚，但需要注意的是，这144个引脚并非全都是GPIO引脚 1.1 GPIO引脚的组从GPIOA 到GPIOG ，总共有七组 GPIO引脚 每一组GPIO接口有0——15 16 个引脚，需要十分要注意的是并没有第16号接口 总结：总共具有7*16=112个GPIO接口 2、功能与性质在文件 STM32F103RTC.pdf中有关于GPIO引脚的详细说明。现对该表格进行解释 可以看到该表格总共有6大列 2.1第一列：Pins 主要表现的是该引脚在不同型号开发板上的序号 例如所有类型的开发板都有PB4这个引脚，其中，在LQFP144(我的STM32F103VE就是属于这一类)中，这个引脚就是它的第134号引脚 2.2第二列：Pin name 这个不用说了，就是引脚的名字 例如这个PB4就代表B组GPIO接口的4号(第5号接口) 2.3 第三列：Type 引脚的类型 主要也I/O型和S型 I/O型就是指Input and Output型，即输入输出型 S型就是指 Supply型，也就是供应型，但具体有什么含义还有待研究 2.4 第四列：I/O Level 是否可容忍5v电压 具有FT 标识的就是能够容忍5v电压的引脚，其中FT 代表5 (Five) V Tolerant 无此标记的引脚只能最高容忍3.3V的电压 2.5第五列：Main functions 引脚的主要功能(通用功能)即GPIO功能，当做普通的I/O引脚使用。 复位期间和刚复位后，复用功能未开启，I/O端口被配置成浮空输入模式(CNFx[1:0]=01b，MODEx[1:0]=00b)。 复位后，JTAG引脚被置于输入上拉或下拉模式： PA15：JTDI置于上拉模式 PA14：JTCK置于下拉模式 PA13：JTMS置于上拉模式 PB4： JNTRST置于上拉模式 当作为输出配置时，写到输出数据寄存器上的值(GPIOx_ODR)输出到相应的I/O引脚。可以以推挽模式或开漏模式(当输出0时，只有N-MOS被打开)使用输出驱动器。 输入数据寄存器(GPIOx_IDR)在每个APB2时钟周期捕捉I/O引脚上的数据。 所有GPIO引脚有一个内部弱上拉和弱下拉，当配置为输入时，它们可以被激活也可以被断开。 2.6 第六列：Alternate functions (可选择的功能) 复用功能 分为默认(Default)和重映射功能(Remap) 即片内外设，包括UART、SPI、CAN、I2C等等，开启这些外设的功能，就是使用了系统的复用功能。 复用功能有两种：没有重映像、重映像（包括部分重映像、完全重映像），使用引脚用作AFIO功能，同样需要对其进行配置。 举个例子：在我的144引脚的STM32F103VE中，PB4是第134号引脚，此引脚为I/O(输入输出引脚)，具有容忍5V高压的能力，主要功能是NJTRST，NJTRST是仿真器调试时的JTAG对内核的调试复位信号，一般用于信号调试，建议不要用作他用。 可选功能中的默认功能是SPI3_MISO，其中的重映射功能是PB4 / TIM3_CH1和SPI1_MISO 二、GPIO的几种模式123456789101112typedef enum&#123; GPIO_Mode_AIN = 0x0, /* 模拟输入 */ GPIO_Mode_IN_FLOATING = 0x04, /* 输入浮空 */ GPIO_Mode_IPD = 0x28, /* 输入下拉 */ GPIO_Mode_IPU = 0x48, /* 输入上拉 */ GPIO_Mode_Out_OD = 0x14, /* 开漏输出 */ GPIO_Mode_Out_PP = 0x10, /* 推挽式输出 */ GPIO_Mode_AF_OD = 0x1C, /* 开漏复用 输出 */ GPIO_Mode_AF_PP = 0x18 /* 推挽式复用 输出 */&#125;GPIOMode_TypeDef; 输入1.模拟输入(GPIO_Mode_AIN = 0x0) 模拟输入：analog input这个好理解，就是可以输入电压而非电平，输入的并非是0或1而是一个具体的电压值 2.浮空输入(GPIO_Mode_IN_FLOATING = 0x04) 浮空输入：floating input由于浮空输入一般多用于外部按键输入，结合图上的输入部分电路，我理解为浮空输入状态下，IO的电平状态是不确定的，完全由外部输入决定，如果在该引脚悬空的情况下，读取该端口的电平是不确定的。[来源] 3.输入下拉(GPIO_Mode_IPD = 0x28) 输入下拉：input down下拉电阻的主要作用是与上接电阻一起在电路驱动器关闭时给线路（节点）以一个固定的电平。[来源] 同样还有下拉电阻它是为了保证无信号输入时输入端的电平为低电平。 [来源] 4.输入上拉(GPIO_Mode_IPU =0x48) 输入上拉：input up在上拉电阻所连接的导线上，如果外部组件未启用，上拉电阻则“微弱地”将输入电压信号“拉高”。当外部组件未连接时，对输入端来说，外部“看上去”就是高阻抗的。这时，通过上拉电阻可以将输入端口处的电压拉高到高电平。如果外部组件启用，它将取消上拉电阻所设置的高电平 。通过这样，上拉电阻可以使引脚即使在未连接外部组件的时候也能保持确定的逻辑电平。 [来源] 上拉电阻的目的是为了保证在无信号输入时输入端的电平为高电平。而在信号输入为低电平是输入端的电平应该也为低电平。如果没有上拉电阻，在没有外界输入的情况下输入端是悬空的，它的电平是未知的无法保证的，上拉电阻就是为了保证无信号输入时输入端的电平为高电平，同样还有下拉电阻它是为了保证无信号输入时输入端的电平为低电平。[来源] 输出(较少用)1.开漏输出(GPIO_Mode_Out_OD = 0x14)开漏输出：output drain 开漏输出：Open-Drain Output开漏输出就是不输出电压，低电平时接地，高电平时不接地。如果外接上拉电阻，则在输出高电平时电压会拉到上拉电阻的电源电压。这种方式适合在连接的外设电压比单片机电压低的时候。 [来源] 可以输出高，低电平，连接数字器件。推挽结构一般是指两个三极管分别受两互补信号的控制，总是在一个三极管导通的时候另一个截止。高低电平由IC的电源低定。推挽电路是两个参数相同的三极管或MOSFET，以推挽方式存在于电路中，各负责正负半周的波形放大任务，电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。[来源] 2.推挽式输出(GPIO_Mode_Out_PP = 0x10) 推挽式输出：push-pull output注意：推挽式输出与开漏输出的区别只有在接Vdd的P-MOS 可以输出高,低电平,连接数字器件;推挽结构一般是指两个三极管分别受两互补信号的控制,总是在一个三极管导通的时候另一个截止 [来源] 推挽模式，有外接上拉电阻时， 逻辑1， 上拉电阻两端电压都是3.3V，PIN输出为高电平。 [来源] 3.开漏复用输出GPIO_Mode_AF_OD = 0x1C 开漏复用输出：Alternate-function of output drain可以理解为GPIO口被用作第二功能时的配置情况（即并非作为通用IO口使用）。 [来源] 4.推挽复用输出 GPIO_Mode_AF_PP = 0x18 推挽复用输出：Alternate-function of push-pull同上 [关于开漏与推挽输出的区别的高级介绍] [更多关于GPIO功能的介绍] 三、GPIO接口的初始化]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[讨论与思考]]></title>
    <url>%2F2018%2F08%2F17%2F%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[​ 有人说写日记会让人变得不愿意和交流，容易固执己见，但我总觉得，有些东西是只能同自己讲的，因为能和自己讨论一个话题或愿意和自己讨论一个话题的人太少了。 ​以前对生活的微小操作往往会对现在和以后产生巨大的影响，这就是著名的蝴蝶效应。乔布斯从来没有想过自己在斯坦福大学选修的一门书法课会帮助他创造出如此惊艳的作品——OSX。但不是每个人都怎么“幸运”，也并不是每个时候都这么“幸运”，当我们在某件事上遇到瓶颈的时候，往往感慨：要是我以前能怎么怎么样就好了。那何不未雨绸缪呢？与此同时，问题接踵而至：如何未雨绸缪？一种是跟随前辈的脚步，汲取前辈成功的经验，当然如果要从事字体设计的话最好跟随乔大师的脚步，从书法学起，但这一种做法目的性太强，太有“复制”的意味，并不是说这样不好，实际上除了英国，所有国家的工业革命都是从“复制”开始的，我只是说我们不应该仅仅满足与这样的方法论。我觉得我已经看过一个视频，讲的是微软为Windows 10制作Windows hero这一张著名壁纸的过程，令我感到意外的是，这张壁纸并不是P的，而是实际拍摄的，最近我还偶然看到Apple home的广告，这个广告十分炫酷，各种变换和光影交错十分令人着迷，但我还是没想到，这个广告的绝大部分场景也都是实拍的。曾经有人谈论到为何要用实拍而不用特效，我们先不讨论成本问题，显而易见的是，对于微软和苹果这样级别的公司，成本已经不是主要的考虑因素了。那为何他们仍要选择实拍呢？那就只能往效果方面考虑了。有人提到，倘若使用特效来做的话，作品的可能性就下降很多，我仔细一看Windows 10 的那张壁纸，确实有道理，一个由光影围绕的窗口周围，围绕着许多不规则的雾，我在对比其他人P出来了的壁纸，用我这个普通消费者的审美观来看，确实前者强很多。这样看来并不是所有伟大的作品都是由人类创造的，有许多是偶然的产物，古代炼丹被炸的道士，恐怕也不知道自己在那场改变人类历史的爆炸中添加了多少木炭和硫磺吧，说的更残酷一点，他甚至不知道他放了什么，就炸成了一场轰轰烈烈的技术革命。所以寻求有所成就也一样，很多时候我们是没有经验可循的，或者我们根本不知道有经验，所以我们就要适当地减少功利性去学习、接触一些事，到必要的时候，这些经历都会把人塑造成他该成为的样子。 我还想强调，这个世界没有我们想象地那么美好，但就是因为这样，我们的人生才有意义。有人说，如果人长生不老了，人生就失去了意义。我可能不太认同这个看法了。我记得我小时候曾经看过《七龙珠》里一个片段：悟空一行人与一个反派争夺龙珠，但不幸的是反派成功拿到了所有龙珠，所以反派向神龙许愿长生不老，神龙实现了他的愿望，就在这时，悟空一行人在最后关头打开了一个结界，不反派吸入了一个什么都没有的世界，我从反派无奈的呐喊中听出了他的绝望。那么问题来了，反派为什么期盼长生不老，为什么愿望实现了，还这么绝望呢？问题就出现在这个结界上。在没被结界吸入前，反派因为某种他认为不好的、无法抗拒的内外部条件，限制住了他，有可能他实力不足无法战胜比他强大地多的对手，想用不死之身实现绝地反击，有可能意识到了自己有一天会被死神打败而毫无反手之力，面对这么多的不美好，他决定用自己的力量和努力，改变这一切，但不幸的是这个结界里虽然没有他所想打败的一切，他可以用永久的时间来享受这般神的待遇，但他还是害怕、恐惧、极度拒绝进入到这个结界，为什么？恐怕他要的不是天下无敌的结果，而是天下无敌的过程，长生不老保证了他能一直、毫无悬念地打败一切他认为不美好的事物，结界的出现剥夺了他一切打败不美好事物的权力，只抛给他冷冰冰的结果，这时，长生不老更像一个诅咒，像一个凶狠却技术精湛的凌迟主刀手。只有具备打败一切不美好事物的胸怀，才能推动人的不断进步与发展，人的一生才会充满激情，等他回头看自己一生的时候，才不会因为虚度年华而感到悔恨。倘若我们真的生活在完美美好的乌托邦世界，我们是绝对不会幸福的。 但从另外一个角度讲，人生不仅需要浪漫与热情，也需要理性与沉思。有人说，很多从农村来的孩子会因为强烈的自尊心变得固执己见，意识不到自己的问题或者不愿意承认自己的错误，不太会知恩图报，我这里并不是地域黑，实际上，城乡的人文和自然条件已经对生活在其中的人造成了影响，这些影响中有好有坏，今天我只想讲一讲坏影响中的其中一个，仅就自己而言，作自我批评。我一直认为大脑是一种非常神奇的东西，任何数据经过了这个系统，会输出不同的值，这些不同的值有可以用一些粗浅的理论来预测一番，毫无疑问，这样的模式是十分有创造性同时也是较为可控的。同样，自身的缺点或许也能够通过一些理论来分析它们的源头。这个时候，毫无立场地思考、批判就远比一腔热情更重要了。这个是每一个人应当具备的能力。倘若热情是力量巨大提供动力的火箭发动机的话，思考就是灵活、精确指示方向的陀螺仪。还有一点，我现在意识到，世界上好像并没有正确和错误，只有合适与不合适，我们应当在一定的情景下，以一定的角度思考问题。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何配置hexo]]></title>
    <url>%2F2018%2F08%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[本版本仅适用于Win环境本文关键字： Hexo绿色版，Hexo便携版，Hexo配置，Hexo，U盘 Hexo是一个快速、简洁且高效的博客框架，支持 GitHub Flavored Markdown 的所有功能；具有超快生成速度，让上百个页面在几秒内瞬间完成渲染；还拥有各式各样的插件等等。 但是就像很多教程里面写的那样，搭建 Hexo 本地环境，需要安装 Node.js、Git 以及使用 npm 进行安装和配置。这对于毫无经验的新手来说，是一个很大的挑战。同时，由于这些环境的存在，导致如果需要更换计算机的时候，重新安装配置一个新的Hexo环境，又得花费一些功夫。 所以呢，锵锵，我们整合了一个 Hexo 便携版，来简化本地环境的部署。 ####版本介绍那么所谓的便携版到底是什么？便携版就是将 Hexo 本地环境所需要的各种依赖环境的整合到一起，做成的不需要安装的版本。 本便携版（Release 1.0.0）所包含的软件如下： Git: 2.7.4 Nodejs: 6.10.1 Npm: 4.4.1 Hexo: 3.2.2 为了便携的需要，不能配置固定的环境变量，所以除此之外还有相应的批处理文件，下文将详细介绍。 ####从零开始，1分钟搭建Hexo写作环境说了这么多，我们这就开始教你如何在1分钟内，从零开始搭建Hexo写作环境！ #####1 注册一个Github帐号 1.1 进入Github，并在右边的3个框框中分别填写 用户名、邮箱地址、账户密码，并点击 Sign up for Github; 1.2 进入欢迎页面后，点击Finish sign up; 1.3 进入到这一步之后（图1.3.1），先别记着点任何东西，查看你的邮箱，应该会收到如下的邮件（图1.3.2），确认你的邮件。否则，你会看到错误页面（图1.3.3）。query完毕之后在图1.3.1所示的页面，点击+ New repository; 1.4 请在红框中的 Repository name 里面输入 用户名.github.io ( 用户名 就是你刚刚 步骤1.1 中注册的用户名)，然后点击 Create repository; 1.5 至此，Github网页注册的部分完毕 ####2 下载HEXO Portable 2.1 访问我们的 HEXO Portable 页面，或者 Github仓库 下载最新的便携版； 2.2 双击得到的自解压文件，解压到你需要安装博客的地方，可以选择硬盘或者U盘； ####3 配置你的环境 3.1 在你的博客的文件夹，你会发现很多批处理文件，我先介绍下各个文件的用途： 配置基本信息 &gt;&gt; 配置博客的基本环境 配置Github部署 &gt;&gt; 配置博客的部署 启动命令行 &gt;&gt; 启动带环境变量的Git-Bash，否则无法使用node、npm、git等命令 新建文章 &gt;&gt; 新建一篇文章 渲染并本地测试 &gt;&gt; 生成并本地预览 渲染并部署 &gt;&gt; 生成并部署到GitHub 重置配置文件 &gt;&gt; 重置_config.yml 3.2 我们继续进行环境配置，双击配置基本信息并按顺序输入以下信息： 主标题：顾名思义 副标题：顾名思义 描述：顾名思义 作者：顾名思义 网站地址：填写 用户名.github.io （此处的用户名为步骤1.1中填写的用户名）如果您已经购买了域名，可以参看相关的文章！ 3.3 双击配置Github部署并按顺序输入以下信息： Github的用户名：此处的用户名为步骤1.1中填写的用户名 Github注册邮箱：此处的注册邮箱为步骤1.1中填写的注册邮箱 3.4 输入完毕之后，会进行测试部署，等待屏幕提示下面将进行部署测试，稍后将有一个openssh的对话框出现，请输入你的github用户密码。的时候，按回车继续；（此处的用户密码为步骤1.1中填写的用户密码） 3.5 然后继续等待，此时屏幕会出现n多行，耐心等待即可； 3.6 等待屏幕提示请访问 https://用户名.github.io 查看是否部署成功！的时候，在浏览器中输入https://用户名.github.io ，理论上可以看到你的Hexo站点！（此处的用户名为步骤1.1中填写的用户名） 3.7 至此，你的Hexo环境就配置完成了，这样你的这个Hexo博客文件夹无论移动到哪一台电脑，都能通过启动命令行出现的bash命令行，或者其余便捷的批处理文件比如新建文章、渲染并本地测试、渲染并部署进行相应的操作。 3.8 如果你在配置中出错，可以运行重置配置文件后，再重复3.1~3.6步骤 ####4 开始享受纯粹的Hexo写作吧！ ####5 备注 本便携版以及本文均使用 CC BY-NC-SA 4.0协议； 本文所有权归 QistChan &amp; Bitmoe Inc. 所有； 本便携版由 Bitmoe Inc. 维护并提供技术支持； 需要技术支持可以在Github仓库 提交Issues； Written with StackEdit.]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
